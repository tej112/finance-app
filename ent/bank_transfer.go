// Code generated by ent, DO NOT EDIT.

package ent

import (
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Bank_Transfer is the model entity for the Bank_Transfer schema.
type Bank_Transfer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// FromBankID holds the value of the "from_bank_id" field.
	FromBankID uuid.UUID `json:"from_bank_id,omitempty"`
	// ToBankID holds the value of the "to_bank_id" field.
	ToBankID uuid.UUID `json:"to_bank_id,omitempty"`
	// TransactionDate holds the value of the "transaction_date" field.
	TransactionDate time.Time `json:"transaction_date,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the Bank_TransferQuery when eager-loading is set.
	Edges        Bank_TransferEdges `json:"edges"`
	selectValues sql.SelectValues
}

// Bank_TransferEdges holds the relations/edges for other nodes in the graph.
type Bank_TransferEdges struct {
	// FromBank holds the value of the from_bank edge.
	FromBank *Bank `json:"from_bank,omitempty"`
	// ToBank holds the value of the to_bank edge.
	ToBank *Bank `json:"to_bank,omitempty"`
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// FromBankOrErr returns the FromBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Bank_TransferEdges) FromBankOrErr() (*Bank, error) {
	if e.FromBank != nil {
		return e.FromBank, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bank.Label}
	}
	return nil, &NotLoadedError{edge: "from_bank"}
}

// ToBankOrErr returns the ToBank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e Bank_TransferEdges) ToBankOrErr() (*Bank, error) {
	if e.ToBank != nil {
		return e.ToBank, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: bank.Label}
	}
	return nil, &NotLoadedError{edge: "to_bank"}
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e Bank_TransferEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[2] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bank_Transfer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bank_transfer.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case bank_transfer.FieldNotes:
			values[i] = new(sql.NullString)
		case bank_transfer.FieldTransactionDate, bank_transfer.FieldCreatedAt, bank_transfer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case bank_transfer.FieldID, bank_transfer.FieldFromBankID, bank_transfer.FieldToBankID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bank_Transfer fields.
func (bt *Bank_Transfer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bank_transfer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				bt.ID = *value
			}
		case bank_transfer.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				bt.Amount = value.Float64
			}
		case bank_transfer.FieldFromBankID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field from_bank_id", values[i])
			} else if value != nil {
				bt.FromBankID = *value
			}
		case bank_transfer.FieldToBankID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field to_bank_id", values[i])
			} else if value != nil {
				bt.ToBankID = *value
			}
		case bank_transfer.FieldTransactionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_date", values[i])
			} else if value.Valid {
				bt.TransactionDate = value.Time
			}
		case bank_transfer.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				bt.Notes = value.String
			}
		case bank_transfer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bt.CreatedAt = value.Time
			}
		case bank_transfer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bt.UpdatedAt = value.Time
			}
		default:
			bt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bank_Transfer.
// This includes values selected through modifiers, order, etc.
func (bt *Bank_Transfer) Value(name string) (ent.Value, error) {
	return bt.selectValues.Get(name)
}

// QueryFromBank queries the "from_bank" edge of the Bank_Transfer entity.
func (bt *Bank_Transfer) QueryFromBank() *BankQuery {
	return NewBankTransferClient(bt.config).QueryFromBank(bt)
}

// QueryToBank queries the "to_bank" edge of the Bank_Transfer entity.
func (bt *Bank_Transfer) QueryToBank() *BankQuery {
	return NewBankTransferClient(bt.config).QueryToBank(bt)
}

// QueryTransactions queries the "transactions" edge of the Bank_Transfer entity.
func (bt *Bank_Transfer) QueryTransactions() *TransactionQuery {
	return NewBankTransferClient(bt.config).QueryTransactions(bt)
}

// Update returns a builder for updating this Bank_Transfer.
// Note that you need to call Bank_Transfer.Unwrap() before calling this method if this Bank_Transfer
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *Bank_Transfer) Update() *BankTransferUpdateOne {
	return NewBankTransferClient(bt.config).UpdateOne(bt)
}

// Unwrap unwraps the Bank_Transfer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bt *Bank_Transfer) Unwrap() *Bank_Transfer {
	_tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bank_Transfer is not a transactional entity")
	}
	bt.config.driver = _tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *Bank_Transfer) String() string {
	var builder strings.Builder
	builder.WriteString("Bank_Transfer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bt.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bt.Amount))
	builder.WriteString(", ")
	builder.WriteString("from_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", bt.FromBankID))
	builder.WriteString(", ")
	builder.WriteString("to_bank_id=")
	builder.WriteString(fmt.Sprintf("%v", bt.ToBankID))
	builder.WriteString(", ")
	builder.WriteString("transaction_date=")
	builder.WriteString(bt.TransactionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(bt.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(bt.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bank_Transfers is a parsable slice of Bank_Transfer.
type Bank_Transfers []*Bank_Transfer
