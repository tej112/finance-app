// Code generated by ent, DO NOT EDIT.

package bank_transfer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bank_transfer type in the database.
	Label = "bank_transfer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldFromBankID holds the string denoting the from_bank_id field in the database.
	FieldFromBankID = "from_bank_id"
	// FieldToBankID holds the string denoting the to_bank_id field in the database.
	FieldToBankID = "to_bank_id"
	// FieldTransactionDate holds the string denoting the transaction_date field in the database.
	FieldTransactionDate = "transaction_date"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFromBank holds the string denoting the from_bank edge name in mutations.
	EdgeFromBank = "from_bank"
	// EdgeToBank holds the string denoting the to_bank edge name in mutations.
	EdgeToBank = "to_bank"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// Table holds the table name of the bank_transfer in the database.
	Table = "bank_transfers"
	// FromBankTable is the table that holds the from_bank relation/edge.
	FromBankTable = "bank_transfers"
	// FromBankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	FromBankInverseTable = "banks"
	// FromBankColumn is the table column denoting the from_bank relation/edge.
	FromBankColumn = "from_bank_id"
	// ToBankTable is the table that holds the to_bank relation/edge.
	ToBankTable = "bank_transfers"
	// ToBankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	ToBankInverseTable = "banks"
	// ToBankColumn is the table column denoting the to_bank relation/edge.
	ToBankColumn = "to_bank_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "transfer_id"
)

// Columns holds all SQL columns for bank_transfer fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldFromBankID,
	FieldToBankID,
	FieldTransactionDate,
	FieldNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(float64) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Bank_Transfer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByFromBankID orders the results by the from_bank_id field.
func ByFromBankID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFromBankID, opts...).ToFunc()
}

// ByToBankID orders the results by the to_bank_id field.
func ByToBankID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToBankID, opts...).ToFunc()
}

// ByTransactionDate orders the results by the transaction_date field.
func ByTransactionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionDate, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFromBankField orders the results by from_bank field.
func ByFromBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFromBankStep(), sql.OrderByField(field, opts...))
	}
}

// ByToBankField orders the results by to_bank field.
func ByToBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newToBankStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFromBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FromBankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FromBankTable, FromBankColumn),
	)
}
func newToBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ToBankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ToBankTable, ToBankColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
