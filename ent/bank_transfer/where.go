// Code generated by ent, DO NOT EDIT.

package bank_transfer

import (
	"finance/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldID, id))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldAmount, v))
}

// FromBankID applies equality check predicate on the "from_bank_id" field. It's identical to FromBankIDEQ.
func FromBankID(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldFromBankID, v))
}

// ToBankID applies equality check predicate on the "to_bank_id" field. It's identical to ToBankIDEQ.
func ToBankID(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldToBankID, v))
}

// TransactionDate applies equality check predicate on the "transaction_date" field. It's identical to TransactionDateEQ.
func TransactionDate(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldTransactionDate, v))
}

// Notes applies equality check predicate on the "notes" field. It's identical to NotesEQ.
func Notes(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldNotes, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldUpdatedAt, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v float64) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldAmount, v))
}

// FromBankIDEQ applies the EQ predicate on the "from_bank_id" field.
func FromBankIDEQ(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldFromBankID, v))
}

// FromBankIDNEQ applies the NEQ predicate on the "from_bank_id" field.
func FromBankIDNEQ(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldFromBankID, v))
}

// FromBankIDIn applies the In predicate on the "from_bank_id" field.
func FromBankIDIn(vs ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldFromBankID, vs...))
}

// FromBankIDNotIn applies the NotIn predicate on the "from_bank_id" field.
func FromBankIDNotIn(vs ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldFromBankID, vs...))
}

// ToBankIDEQ applies the EQ predicate on the "to_bank_id" field.
func ToBankIDEQ(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldToBankID, v))
}

// ToBankIDNEQ applies the NEQ predicate on the "to_bank_id" field.
func ToBankIDNEQ(v uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldToBankID, v))
}

// ToBankIDIn applies the In predicate on the "to_bank_id" field.
func ToBankIDIn(vs ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldToBankID, vs...))
}

// ToBankIDNotIn applies the NotIn predicate on the "to_bank_id" field.
func ToBankIDNotIn(vs ...uuid.UUID) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldToBankID, vs...))
}

// TransactionDateEQ applies the EQ predicate on the "transaction_date" field.
func TransactionDateEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldTransactionDate, v))
}

// TransactionDateNEQ applies the NEQ predicate on the "transaction_date" field.
func TransactionDateNEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldTransactionDate, v))
}

// TransactionDateIn applies the In predicate on the "transaction_date" field.
func TransactionDateIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldTransactionDate, vs...))
}

// TransactionDateNotIn applies the NotIn predicate on the "transaction_date" field.
func TransactionDateNotIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldTransactionDate, vs...))
}

// TransactionDateGT applies the GT predicate on the "transaction_date" field.
func TransactionDateGT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldTransactionDate, v))
}

// TransactionDateGTE applies the GTE predicate on the "transaction_date" field.
func TransactionDateGTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldTransactionDate, v))
}

// TransactionDateLT applies the LT predicate on the "transaction_date" field.
func TransactionDateLT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldTransactionDate, v))
}

// TransactionDateLTE applies the LTE predicate on the "transaction_date" field.
func TransactionDateLTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldTransactionDate, v))
}

// NotesEQ applies the EQ predicate on the "notes" field.
func NotesEQ(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldNotes, v))
}

// NotesNEQ applies the NEQ predicate on the "notes" field.
func NotesNEQ(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldNotes, v))
}

// NotesIn applies the In predicate on the "notes" field.
func NotesIn(vs ...string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldNotes, vs...))
}

// NotesNotIn applies the NotIn predicate on the "notes" field.
func NotesNotIn(vs ...string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldNotes, vs...))
}

// NotesGT applies the GT predicate on the "notes" field.
func NotesGT(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldNotes, v))
}

// NotesGTE applies the GTE predicate on the "notes" field.
func NotesGTE(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldNotes, v))
}

// NotesLT applies the LT predicate on the "notes" field.
func NotesLT(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldNotes, v))
}

// NotesLTE applies the LTE predicate on the "notes" field.
func NotesLTE(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldNotes, v))
}

// NotesContains applies the Contains predicate on the "notes" field.
func NotesContains(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldContains(FieldNotes, v))
}

// NotesHasPrefix applies the HasPrefix predicate on the "notes" field.
func NotesHasPrefix(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldHasPrefix(FieldNotes, v))
}

// NotesHasSuffix applies the HasSuffix predicate on the "notes" field.
func NotesHasSuffix(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldHasSuffix(FieldNotes, v))
}

// NotesIsNil applies the IsNil predicate on the "notes" field.
func NotesIsNil() predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIsNull(FieldNotes))
}

// NotesNotNil applies the NotNil predicate on the "notes" field.
func NotesNotNil() predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotNull(FieldNotes))
}

// NotesEqualFold applies the EqualFold predicate on the "notes" field.
func NotesEqualFold(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEqualFold(FieldNotes, v))
}

// NotesContainsFold applies the ContainsFold predicate on the "notes" field.
func NotesContainsFold(v string) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldContainsFold(FieldNotes, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasFromBank applies the HasEdge predicate on the "from_bank" edge.
func HasFromBank() predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FromBankTable, FromBankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFromBankWith applies the HasEdge predicate on the "from_bank" edge with a given conditions (other predicates).
func HasFromBankWith(preds ...predicate.Bank) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := newFromBankStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasToBank applies the HasEdge predicate on the "to_bank" edge.
func HasToBank() predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ToBankTable, ToBankColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasToBankWith applies the HasEdge predicate on the "to_bank" edge with a given conditions (other predicates).
func HasToBankWith(preds ...predicate.Bank) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := newToBankStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bank_Transfer) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bank_Transfer) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bank_Transfer) predicate.Bank_Transfer {
	return predicate.Bank_Transfer(sql.NotPredicates(p))
}
