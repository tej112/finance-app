// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldBankID holds the string denoting the bank_id field in the database.
	FieldBankID = "bank_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldTransferID holds the string denoting the transfer_id field in the database.
	FieldTransferID = "transfer_id"
	// FieldTransactionType holds the string denoting the transaction_type field in the database.
	FieldTransactionType = "transaction_type"
	// FieldTransferType holds the string denoting the transfer_type field in the database.
	FieldTransferType = "transfer_type"
	// FieldTransactionDate holds the string denoting the transaction_date field in the database.
	FieldTransactionDate = "transaction_date"
	// FieldNotes holds the string denoting the notes field in the database.
	FieldNotes = "notes"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeBank holds the string denoting the bank edge name in mutations.
	EdgeBank = "bank"
	// EdgeCategory holds the string denoting the category edge name in mutations.
	EdgeCategory = "category"
	// EdgeTransfer holds the string denoting the transfer edge name in mutations.
	EdgeTransfer = "transfer"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// BankTable is the table that holds the bank relation/edge.
	BankTable = "transactions"
	// BankInverseTable is the table name for the Bank entity.
	// It exists in this package in order to avoid circular dependency with the "bank" package.
	BankInverseTable = "banks"
	// BankColumn is the table column denoting the bank relation/edge.
	BankColumn = "bank_id"
	// CategoryTable is the table that holds the category relation/edge.
	CategoryTable = "transactions"
	// CategoryInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryInverseTable = "categories"
	// CategoryColumn is the table column denoting the category relation/edge.
	CategoryColumn = "category_id"
	// TransferTable is the table that holds the transfer relation/edge.
	TransferTable = "transactions"
	// TransferInverseTable is the table name for the Bank_Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "bank_transfer" package.
	TransferInverseTable = "bank_transfers"
	// TransferColumn is the table column denoting the transfer relation/edge.
	TransferColumn = "transfer_id"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldAmount,
	FieldBankID,
	FieldCategoryID,
	FieldTransferID,
	FieldTransactionType,
	FieldTransferType,
	FieldTransactionDate,
	FieldNotes,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AmountValidator is a validator for the "amount" field. It is called by the builders before save.
	AmountValidator func(float64) error
	// DefaultTransactionDate holds the default value on creation for the "transaction_date" field.
	DefaultTransactionDate func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// TransactionType defines the type for the "transaction_type" enum field.
type TransactionType string

// TransactionType values.
const (
	TransactionTypeINCOME   TransactionType = "INCOME"
	TransactionTypeEXPENSE  TransactionType = "EXPENSE"
	TransactionTypeTRANSFER TransactionType = "TRANSFER"
)

func (tt TransactionType) String() string {
	return string(tt)
}

// TransactionTypeValidator is a validator for the "transaction_type" field enum values. It is called by the builders before save.
func TransactionTypeValidator(tt TransactionType) error {
	switch tt {
	case TransactionTypeINCOME, TransactionTypeEXPENSE, TransactionTypeTRANSFER:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for transaction_type field: %q", tt)
	}
}

// TransferType defines the type for the "transfer_type" enum field.
type TransferType string

// TransferType values.
const (
	TransferTypeCREDIT TransferType = "CREDIT"
	TransferTypeDEBIT  TransferType = "DEBIT"
)

func (tt TransferType) String() string {
	return string(tt)
}

// TransferTypeValidator is a validator for the "transfer_type" field enum values. It is called by the builders before save.
func TransferTypeValidator(tt TransferType) error {
	switch tt {
	case TransferTypeCREDIT, TransferTypeDEBIT:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for transfer_type field: %q", tt)
	}
}

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAmount orders the results by the amount field.
func ByAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAmount, opts...).ToFunc()
}

// ByBankID orders the results by the bank_id field.
func ByBankID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBankID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// ByTransferID orders the results by the transfer_id field.
func ByTransferID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferID, opts...).ToFunc()
}

// ByTransactionType orders the results by the transaction_type field.
func ByTransactionType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionType, opts...).ToFunc()
}

// ByTransferType orders the results by the transfer_type field.
func ByTransferType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferType, opts...).ToFunc()
}

// ByTransactionDate orders the results by the transaction_date field.
func ByTransactionDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransactionDate, opts...).ToFunc()
}

// ByNotes orders the results by the notes field.
func ByNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotes, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBankField orders the results by bank field.
func ByBankField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBankStep(), sql.OrderByField(field, opts...))
	}
}

// ByCategoryField orders the results by category field.
func ByCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTransferField orders the results by transfer field.
func ByTransferField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransferStep(), sql.OrderByField(field, opts...))
	}
}
func newBankStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BankInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BankTable, BankColumn),
	)
}
func newCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CategoryTable, CategoryColumn),
	)
}
func newTransferStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransferInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TransferTable, TransferColumn),
	)
}
