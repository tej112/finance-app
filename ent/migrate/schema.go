// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BanksColumns holds the columns for the "banks" table.
	BanksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "account_number", Type: field.TypeString, Nullable: true},
		{Name: "ifsc_code", Type: field.TypeString, Nullable: true},
		{Name: "branch_name", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// BanksTable holds the schema information for the "banks" table.
	BanksTable = &schema.Table{
		Name:       "banks",
		Columns:    BanksColumns,
		PrimaryKey: []*schema.Column{BanksColumns[0]},
	}
	// BankTransfersColumns holds the columns for the "bank_transfers" table.
	BankTransfersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(5, 2)", "postgres": "numeric(5, 2)"}},
		{Name: "transaction_date", Type: field.TypeTime},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "from_bank_id", Type: field.TypeUUID},
		{Name: "to_bank_id", Type: field.TypeUUID},
	}
	// BankTransfersTable holds the schema information for the "bank_transfers" table.
	BankTransfersTable = &schema.Table{
		Name:       "bank_transfers",
		Columns:    BankTransfersColumns,
		PrimaryKey: []*schema.Column{BankTransfersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "bank_transfers_banks_debits",
				Columns:    []*schema.Column{BankTransfersColumns[6]},
				RefColumns: []*schema.Column{BanksColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "bank_transfers_banks_credits",
				Columns:    []*schema.Column{BankTransfersColumns[7]},
				RefColumns: []*schema.Column{BanksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// CreditCardsColumns holds the columns for the "credit_cards" table.
	CreditCardsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CreditCardsTable holds the schema information for the "credit_cards" table.
	CreditCardsTable = &schema.Table{
		Name:       "credit_cards",
		Columns:    CreditCardsColumns,
		PrimaryKey: []*schema.Column{CreditCardsColumns[0]},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"mysql": "decimal(5, 2)", "postgres": "numeric(5, 2)"}},
		{Name: "transaction_type", Type: field.TypeEnum, Enums: []string{"INCOME", "EXPENSE", "TRANSFER"}},
		{Name: "transfer_type", Type: field.TypeEnum, Enums: []string{"CREDIT", "DEBIT"}},
		{Name: "transaction_date", Type: field.TypeTime},
		{Name: "notes", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "bank_id", Type: field.TypeUUID},
		{Name: "transfer_id", Type: field.TypeUUID, Nullable: true},
		{Name: "category_id", Type: field.TypeUUID, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_banks_transactions",
				Columns:    []*schema.Column{TransactionsColumns[8]},
				RefColumns: []*schema.Column{BanksColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "transactions_bank_transfers_transactions",
				Columns:    []*schema.Column{TransactionsColumns[9]},
				RefColumns: []*schema.Column{BankTransfersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "transactions_categories_transactions",
				Columns:    []*schema.Column{TransactionsColumns[10]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BanksTable,
		BankTransfersTable,
		CategoriesTable,
		CreditCardsTable,
		TransactionsTable,
	}
)

func init() {
	BankTransfersTable.ForeignKeys[0].RefTable = BanksTable
	BankTransfersTable.ForeignKeys[1].RefTable = BanksTable
	TransactionsTable.ForeignKeys[0].RefTable = BanksTable
	TransactionsTable.ForeignKeys[1].RefTable = BankTransfersTable
	TransactionsTable.ForeignKeys[2].RefTable = CategoriesTable
}
