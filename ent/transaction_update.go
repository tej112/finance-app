// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/category"
	"finance/ent/predicate"
	"finance/ent/transaction"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetAmount sets the "amount" field.
func (tu *TransactionUpdate) SetAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetAmount()
	tu.mutation.SetAmount(f)
	return tu
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableAmount(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetAmount(*f)
	}
	return tu
}

// AddAmount adds f to the "amount" field.
func (tu *TransactionUpdate) AddAmount(f float64) *TransactionUpdate {
	tu.mutation.AddAmount(f)
	return tu
}

// SetBankID sets the "bank_id" field.
func (tu *TransactionUpdate) SetBankID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetBankID(u)
	return tu
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableBankID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetBankID(*u)
	}
	return tu
}

// SetCategoryID sets the "category_id" field.
func (tu *TransactionUpdate) SetCategoryID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetCategoryID(u)
	return tu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCategoryID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetCategoryID(*u)
	}
	return tu
}

// ClearCategoryID clears the value of the "category_id" field.
func (tu *TransactionUpdate) ClearCategoryID() *TransactionUpdate {
	tu.mutation.ClearCategoryID()
	return tu
}

// SetTransferID sets the "transfer_id" field.
func (tu *TransactionUpdate) SetTransferID(u uuid.UUID) *TransactionUpdate {
	tu.mutation.SetTransferID(u)
	return tu
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransferID(u *uuid.UUID) *TransactionUpdate {
	if u != nil {
		tu.SetTransferID(*u)
	}
	return tu
}

// ClearTransferID clears the value of the "transfer_id" field.
func (tu *TransactionUpdate) ClearTransferID() *TransactionUpdate {
	tu.mutation.ClearTransferID()
	return tu
}

// SetTransactionType sets the "transaction_type" field.
func (tu *TransactionUpdate) SetTransactionType(tt transaction.TransactionType) *TransactionUpdate {
	tu.mutation.SetTransactionType(tt)
	return tu
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionType(tt *transaction.TransactionType) *TransactionUpdate {
	if tt != nil {
		tu.SetTransactionType(*tt)
	}
	return tu
}

// SetTransferType sets the "transfer_type" field.
func (tu *TransactionUpdate) SetTransferType(tt transaction.TransferType) *TransactionUpdate {
	tu.mutation.SetTransferType(tt)
	return tu
}

// SetNillableTransferType sets the "transfer_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransferType(tt *transaction.TransferType) *TransactionUpdate {
	if tt != nil {
		tu.SetTransferType(*tt)
	}
	return tu
}

// SetTransactionDate sets the "transaction_date" field.
func (tu *TransactionUpdate) SetTransactionDate(t time.Time) *TransactionUpdate {
	tu.mutation.SetTransactionDate(t)
	return tu
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTransactionDate(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetTransactionDate(*t)
	}
	return tu
}

// SetNotes sets the "notes" field.
func (tu *TransactionUpdate) SetNotes(s string) *TransactionUpdate {
	tu.mutation.SetNotes(s)
	return tu
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableNotes(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetNotes(*s)
	}
	return tu
}

// ClearNotes clears the value of the "notes" field.
func (tu *TransactionUpdate) ClearNotes() *TransactionUpdate {
	tu.mutation.ClearNotes()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TransactionUpdate) SetCreatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableCreatedAt(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TransactionUpdate) SetUpdatedAt(t time.Time) *TransactionUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetBank sets the "bank" edge to the Bank entity.
func (tu *TransactionUpdate) SetBank(b *Bank) *TransactionUpdate {
	return tu.SetBankID(b.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (tu *TransactionUpdate) SetCategory(c *Category) *TransactionUpdate {
	return tu.SetCategoryID(c.ID)
}

// SetTransfer sets the "transfer" edge to the Bank_Transfer entity.
func (tu *TransactionUpdate) SetTransfer(b *Bank_Transfer) *TransactionUpdate {
	return tu.SetTransferID(b.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (tu *TransactionUpdate) ClearBank() *TransactionUpdate {
	tu.mutation.ClearBank()
	return tu
}

// ClearCategory clears the "category" edge to the Category entity.
func (tu *TransactionUpdate) ClearCategory() *TransactionUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// ClearTransfer clears the "transfer" edge to the Bank_Transfer entity.
func (tu *TransactionUpdate) ClearTransfer() *TransactionUpdate {
	tu.mutation.ClearTransfer()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TransactionUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TransferType(); ok {
		if err := transaction.TransferTypeValidator(v); err != nil {
			return &ValidationError{Name: "transfer_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transfer_type": %w`, err)}
		}
	}
	if tu.mutation.BankCleared() && len(tu.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Transaction.bank"`)
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TransferType(); ok {
		_spec.SetField(transaction.FieldTransferType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TransactionDate(); ok {
		_spec.SetField(transaction.FieldTransactionDate, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Notes(); ok {
		_spec.SetField(transaction.FieldNotes, field.TypeString, value)
	}
	if tu.mutation.NotesCleared() {
		_spec.ClearField(transaction.FieldNotes, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BankTable,
			Columns: []string{transaction.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BankTable,
			Columns: []string{transaction.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.TransferTable,
			Columns: []string{transaction.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.TransferTable,
			Columns: []string{transaction.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetAmount sets the "amount" field.
func (tuo *TransactionUpdateOne) SetAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetAmount()
	tuo.mutation.SetAmount(f)
	return tuo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableAmount(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetAmount(*f)
	}
	return tuo
}

// AddAmount adds f to the "amount" field.
func (tuo *TransactionUpdateOne) AddAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddAmount(f)
	return tuo
}

// SetBankID sets the "bank_id" field.
func (tuo *TransactionUpdateOne) SetBankID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetBankID(u)
	return tuo
}

// SetNillableBankID sets the "bank_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableBankID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetBankID(*u)
	}
	return tuo
}

// SetCategoryID sets the "category_id" field.
func (tuo *TransactionUpdateOne) SetCategoryID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetCategoryID(u)
	return tuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCategoryID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetCategoryID(*u)
	}
	return tuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (tuo *TransactionUpdateOne) ClearCategoryID() *TransactionUpdateOne {
	tuo.mutation.ClearCategoryID()
	return tuo
}

// SetTransferID sets the "transfer_id" field.
func (tuo *TransactionUpdateOne) SetTransferID(u uuid.UUID) *TransactionUpdateOne {
	tuo.mutation.SetTransferID(u)
	return tuo
}

// SetNillableTransferID sets the "transfer_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransferID(u *uuid.UUID) *TransactionUpdateOne {
	if u != nil {
		tuo.SetTransferID(*u)
	}
	return tuo
}

// ClearTransferID clears the value of the "transfer_id" field.
func (tuo *TransactionUpdateOne) ClearTransferID() *TransactionUpdateOne {
	tuo.mutation.ClearTransferID()
	return tuo
}

// SetTransactionType sets the "transaction_type" field.
func (tuo *TransactionUpdateOne) SetTransactionType(tt transaction.TransactionType) *TransactionUpdateOne {
	tuo.mutation.SetTransactionType(tt)
	return tuo
}

// SetNillableTransactionType sets the "transaction_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionType(tt *transaction.TransactionType) *TransactionUpdateOne {
	if tt != nil {
		tuo.SetTransactionType(*tt)
	}
	return tuo
}

// SetTransferType sets the "transfer_type" field.
func (tuo *TransactionUpdateOne) SetTransferType(tt transaction.TransferType) *TransactionUpdateOne {
	tuo.mutation.SetTransferType(tt)
	return tuo
}

// SetNillableTransferType sets the "transfer_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransferType(tt *transaction.TransferType) *TransactionUpdateOne {
	if tt != nil {
		tuo.SetTransferType(*tt)
	}
	return tuo
}

// SetTransactionDate sets the "transaction_date" field.
func (tuo *TransactionUpdateOne) SetTransactionDate(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetTransactionDate(t)
	return tuo
}

// SetNillableTransactionDate sets the "transaction_date" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTransactionDate(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetTransactionDate(*t)
	}
	return tuo
}

// SetNotes sets the "notes" field.
func (tuo *TransactionUpdateOne) SetNotes(s string) *TransactionUpdateOne {
	tuo.mutation.SetNotes(s)
	return tuo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableNotes(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetNotes(*s)
	}
	return tuo
}

// ClearNotes clears the value of the "notes" field.
func (tuo *TransactionUpdateOne) ClearNotes() *TransactionUpdateOne {
	tuo.mutation.ClearNotes()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TransactionUpdateOne) SetCreatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableCreatedAt(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TransactionUpdateOne) SetUpdatedAt(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetBank sets the "bank" edge to the Bank entity.
func (tuo *TransactionUpdateOne) SetBank(b *Bank) *TransactionUpdateOne {
	return tuo.SetBankID(b.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (tuo *TransactionUpdateOne) SetCategory(c *Category) *TransactionUpdateOne {
	return tuo.SetCategoryID(c.ID)
}

// SetTransfer sets the "transfer" edge to the Bank_Transfer entity.
func (tuo *TransactionUpdateOne) SetTransfer(b *Bank_Transfer) *TransactionUpdateOne {
	return tuo.SetTransferID(b.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearBank clears the "bank" edge to the Bank entity.
func (tuo *TransactionUpdateOne) ClearBank() *TransactionUpdateOne {
	tuo.mutation.ClearBank()
	return tuo
}

// ClearCategory clears the "category" edge to the Category entity.
func (tuo *TransactionUpdateOne) ClearCategory() *TransactionUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// ClearTransfer clears the "transfer" edge to the Bank_Transfer entity.
func (tuo *TransactionUpdateOne) ClearTransfer() *TransactionUpdateOne {
	tuo.mutation.ClearTransfer()
	return tuo
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TransactionUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := transaction.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.Amount(); ok {
		if err := transaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Transaction.amount": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TransactionType(); ok {
		if err := transaction.TransactionTypeValidator(v); err != nil {
			return &ValidationError{Name: "transaction_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transaction_type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TransferType(); ok {
		if err := transaction.TransferTypeValidator(v); err != nil {
			return &ValidationError{Name: "transfer_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.transfer_type": %w`, err)}
		}
	}
	if tuo.mutation.BankCleared() && len(tuo.mutation.BankIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Transaction.bank"`)
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.TransactionType(); ok {
		_spec.SetField(transaction.FieldTransactionType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TransferType(); ok {
		_spec.SetField(transaction.FieldTransferType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TransactionDate(); ok {
		_spec.SetField(transaction.FieldTransactionDate, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Notes(); ok {
		_spec.SetField(transaction.FieldNotes, field.TypeString, value)
	}
	if tuo.mutation.NotesCleared() {
		_spec.ClearField(transaction.FieldNotes, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.BankCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BankTable,
			Columns: []string{transaction.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BankTable,
			Columns: []string{transaction.BankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TransferCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.TransferTable,
			Columns: []string{transaction.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TransferIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.TransferTable,
			Columns: []string{transaction.TransferColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
