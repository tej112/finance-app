// Code generated by ent, DO NOT EDIT.

package ent

import (
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/category"
	"finance/ent/transaction"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// BankID holds the value of the "bank_id" field.
	BankID uuid.UUID `json:"bank_id,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// TransferID holds the value of the "transfer_id" field.
	TransferID uuid.UUID `json:"transfer_id,omitempty"`
	// TransactionType holds the value of the "transaction_type" field.
	TransactionType transaction.TransactionType `json:"transaction_type,omitempty"`
	// TransferType holds the value of the "transfer_type" field.
	TransferType *transaction.TransferType `json:"transfer_type,omitempty"`
	// TransactionDate holds the value of the "transaction_date" field.
	TransactionDate time.Time `json:"transaction_date,omitempty"`
	// Notes holds the value of the "notes" field.
	Notes string `json:"notes,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges        TransactionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// Bank holds the value of the bank edge.
	Bank *Bank `json:"bank,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// Transfer holds the value of the transfer edge.
	Transfer *Bank_Transfer `json:"transfer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// BankOrErr returns the Bank value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) BankOrErr() (*Bank, error) {
	if e.Bank != nil {
		return e.Bank, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: bank.Label}
	}
	return nil, &NotLoadedError{edge: "bank"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// TransferOrErr returns the Transfer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) TransferOrErr() (*Bank_Transfer, error) {
	if e.Transfer != nil {
		return e.Transfer, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: bank_transfer.Label}
	}
	return nil, &NotLoadedError{edge: "transfer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldTransactionType, transaction.FieldTransferType, transaction.FieldNotes:
			values[i] = new(sql.NullString)
		case transaction.FieldTransactionDate, transaction.FieldCreatedAt, transaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case transaction.FieldID, transaction.FieldBankID, transaction.FieldCategoryID, transaction.FieldTransferID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case transaction.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				t.Amount = value.Float64
			}
		case transaction.FieldBankID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field bank_id", values[i])
			} else if value != nil {
				t.BankID = *value
			}
		case transaction.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				t.CategoryID = *value
			}
		case transaction.FieldTransferID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_id", values[i])
			} else if value != nil {
				t.TransferID = *value
			}
		case transaction.FieldTransactionType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_type", values[i])
			} else if value.Valid {
				t.TransactionType = transaction.TransactionType(value.String)
			}
		case transaction.FieldTransferType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transfer_type", values[i])
			} else if value.Valid {
				t.TransferType = new(transaction.TransferType)
				*t.TransferType = transaction.TransferType(value.String)
			}
		case transaction.FieldTransactionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_date", values[i])
			} else if value.Valid {
				t.TransactionDate = value.Time
			}
		case transaction.FieldNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field notes", values[i])
			} else if value.Valid {
				t.Notes = value.String
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBank queries the "bank" edge of the Transaction entity.
func (t *Transaction) QueryBank() *BankQuery {
	return NewTransactionClient(t.config).QueryBank(t)
}

// QueryCategory queries the "category" edge of the Transaction entity.
func (t *Transaction) QueryCategory() *CategoryQuery {
	return NewTransactionClient(t.config).QueryCategory(t)
}

// QueryTransfer queries the "transfer" edge of the Transaction entity.
func (t *Transaction) QueryTransfer() *BankTransferQuery {
	return NewTransactionClient(t.config).QueryTransfer(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", t.Amount))
	builder.WriteString(", ")
	builder.WriteString("bank_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BankID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", t.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("transfer_id=")
	builder.WriteString(fmt.Sprintf("%v", t.TransferID))
	builder.WriteString(", ")
	builder.WriteString("transaction_type=")
	builder.WriteString(fmt.Sprintf("%v", t.TransactionType))
	builder.WriteString(", ")
	if v := t.TransferType; v != nil {
		builder.WriteString("transfer_type=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("transaction_date=")
	builder.WriteString(t.TransactionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notes=")
	builder.WriteString(t.Notes)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
