// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/creditcard"
	"finance/ent/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CreditCardUpdate is the builder for updating CreditCard entities.
type CreditCardUpdate struct {
	config
	hooks    []Hook
	mutation *CreditCardMutation
}

// Where appends a list predicates to the CreditCardUpdate builder.
func (ccu *CreditCardUpdate) Where(ps ...predicate.CreditCard) *CreditCardUpdate {
	ccu.mutation.Where(ps...)
	return ccu
}

// Mutation returns the CreditCardMutation object of the builder.
func (ccu *CreditCardUpdate) Mutation() *CreditCardMutation {
	return ccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccu *CreditCardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccu.sqlSave, ccu.mutation, ccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccu *CreditCardUpdate) SaveX(ctx context.Context) int {
	affected, err := ccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccu *CreditCardUpdate) Exec(ctx context.Context) error {
	_, err := ccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccu *CreditCardUpdate) ExecX(ctx context.Context) {
	if err := ccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccu *CreditCardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(creditcard.Table, creditcard.Columns, sqlgraph.NewFieldSpec(creditcard.FieldID, field.TypeInt))
	if ps := ccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccu.mutation.done = true
	return n, nil
}

// CreditCardUpdateOne is the builder for updating a single CreditCard entity.
type CreditCardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CreditCardMutation
}

// Mutation returns the CreditCardMutation object of the builder.
func (ccuo *CreditCardUpdateOne) Mutation() *CreditCardMutation {
	return ccuo.mutation
}

// Where appends a list predicates to the CreditCardUpdate builder.
func (ccuo *CreditCardUpdateOne) Where(ps ...predicate.CreditCard) *CreditCardUpdateOne {
	ccuo.mutation.Where(ps...)
	return ccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccuo *CreditCardUpdateOne) Select(field string, fields ...string) *CreditCardUpdateOne {
	ccuo.fields = append([]string{field}, fields...)
	return ccuo
}

// Save executes the query and returns the updated CreditCard entity.
func (ccuo *CreditCardUpdateOne) Save(ctx context.Context) (*CreditCard, error) {
	return withHooks(ctx, ccuo.sqlSave, ccuo.mutation, ccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccuo *CreditCardUpdateOne) SaveX(ctx context.Context) *CreditCard {
	node, err := ccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccuo *CreditCardUpdateOne) Exec(ctx context.Context) error {
	_, err := ccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccuo *CreditCardUpdateOne) ExecX(ctx context.Context) {
	if err := ccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccuo *CreditCardUpdateOne) sqlSave(ctx context.Context) (_node *CreditCard, err error) {
	_spec := sqlgraph.NewUpdateSpec(creditcard.Table, creditcard.Columns, sqlgraph.NewFieldSpec(creditcard.FieldID, field.TypeInt))
	id, ok := ccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CreditCard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, creditcard.FieldID)
		for _, f := range fields {
			if !creditcard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != creditcard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &CreditCard{config: ccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{creditcard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccuo.mutation.done = true
	return _node, nil
}
