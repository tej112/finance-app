// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/category"
	"finance/ent/predicate"
	"finance/ent/transaction"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBank         = "Bank"
	TypeBankTransfer = "Bank_Transfer"
	TypeCategory     = "Category"
	TypeCreditCard   = "CreditCard"
	TypeTransaction  = "Transaction"
)

// BankMutation represents an operation that mutates the Bank nodes in the graph.
type BankMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	account_number      *string
	ifsc_code           *string
	branch_name         *string
	metadata            *map[string]interface{}
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	debits              map[uuid.UUID]struct{}
	removeddebits       map[uuid.UUID]struct{}
	cleareddebits       bool
	credits             map[uuid.UUID]struct{}
	removedcredits      map[uuid.UUID]struct{}
	clearedcredits      bool
	transactions        map[uuid.UUID]struct{}
	removedtransactions map[uuid.UUID]struct{}
	clearedtransactions bool
	done                bool
	oldValue            func(context.Context) (*Bank, error)
	predicates          []predicate.Bank
}

var _ ent.Mutation = (*BankMutation)(nil)

// bankOption allows management of the mutation configuration using functional options.
type bankOption func(*BankMutation)

// newBankMutation creates new mutation for the Bank entity.
func newBankMutation(c config, op Op, opts ...bankOption) *BankMutation {
	m := &BankMutation{
		config:        c,
		op:            op,
		typ:           TypeBank,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBankID sets the ID field of the mutation.
func withBankID(id uuid.UUID) bankOption {
	return func(m *BankMutation) {
		var (
			err   error
			once  sync.Once
			value *Bank
		)
		m.oldValue = func(ctx context.Context) (*Bank, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bank.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBank sets the old Bank of the mutation.
func withBank(node *Bank) bankOption {
	return func(m *BankMutation) {
		m.oldValue = func(context.Context) (*Bank, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bank entities.
func (m *BankMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BankMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BankMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bank.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *BankMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BankMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BankMutation) ResetName() {
	m.name = nil
}

// SetAccountNumber sets the "account_number" field.
func (m *BankMutation) SetAccountNumber(s string) {
	m.account_number = &s
}

// AccountNumber returns the value of the "account_number" field in the mutation.
func (m *BankMutation) AccountNumber() (r string, exists bool) {
	v := m.account_number
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountNumber returns the old "account_number" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldAccountNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountNumber: %w", err)
	}
	return oldValue.AccountNumber, nil
}

// ClearAccountNumber clears the value of the "account_number" field.
func (m *BankMutation) ClearAccountNumber() {
	m.account_number = nil
	m.clearedFields[bank.FieldAccountNumber] = struct{}{}
}

// AccountNumberCleared returns if the "account_number" field was cleared in this mutation.
func (m *BankMutation) AccountNumberCleared() bool {
	_, ok := m.clearedFields[bank.FieldAccountNumber]
	return ok
}

// ResetAccountNumber resets all changes to the "account_number" field.
func (m *BankMutation) ResetAccountNumber() {
	m.account_number = nil
	delete(m.clearedFields, bank.FieldAccountNumber)
}

// SetIfscCode sets the "ifsc_code" field.
func (m *BankMutation) SetIfscCode(s string) {
	m.ifsc_code = &s
}

// IfscCode returns the value of the "ifsc_code" field in the mutation.
func (m *BankMutation) IfscCode() (r string, exists bool) {
	v := m.ifsc_code
	if v == nil {
		return
	}
	return *v, true
}

// OldIfscCode returns the old "ifsc_code" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldIfscCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIfscCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIfscCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIfscCode: %w", err)
	}
	return oldValue.IfscCode, nil
}

// ClearIfscCode clears the value of the "ifsc_code" field.
func (m *BankMutation) ClearIfscCode() {
	m.ifsc_code = nil
	m.clearedFields[bank.FieldIfscCode] = struct{}{}
}

// IfscCodeCleared returns if the "ifsc_code" field was cleared in this mutation.
func (m *BankMutation) IfscCodeCleared() bool {
	_, ok := m.clearedFields[bank.FieldIfscCode]
	return ok
}

// ResetIfscCode resets all changes to the "ifsc_code" field.
func (m *BankMutation) ResetIfscCode() {
	m.ifsc_code = nil
	delete(m.clearedFields, bank.FieldIfscCode)
}

// SetBranchName sets the "branch_name" field.
func (m *BankMutation) SetBranchName(s string) {
	m.branch_name = &s
}

// BranchName returns the value of the "branch_name" field in the mutation.
func (m *BankMutation) BranchName() (r string, exists bool) {
	v := m.branch_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBranchName returns the old "branch_name" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldBranchName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBranchName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBranchName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBranchName: %w", err)
	}
	return oldValue.BranchName, nil
}

// ClearBranchName clears the value of the "branch_name" field.
func (m *BankMutation) ClearBranchName() {
	m.branch_name = nil
	m.clearedFields[bank.FieldBranchName] = struct{}{}
}

// BranchNameCleared returns if the "branch_name" field was cleared in this mutation.
func (m *BankMutation) BranchNameCleared() bool {
	_, ok := m.clearedFields[bank.FieldBranchName]
	return ok
}

// ResetBranchName resets all changes to the "branch_name" field.
func (m *BankMutation) ResetBranchName() {
	m.branch_name = nil
	delete(m.clearedFields, bank.FieldBranchName)
}

// SetMetadata sets the "metadata" field.
func (m *BankMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *BankMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *BankMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[bank.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *BankMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[bank.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *BankMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, bank.FieldMetadata)
}

// SetCreatedAt sets the "created_at" field.
func (m *BankMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BankMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BankMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BankMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BankMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bank entity.
// If the Bank object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BankMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddDebitIDs adds the "debits" edge to the Bank_Transfer entity by ids.
func (m *BankMutation) AddDebitIDs(ids ...uuid.UUID) {
	if m.debits == nil {
		m.debits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.debits[ids[i]] = struct{}{}
	}
}

// ClearDebits clears the "debits" edge to the Bank_Transfer entity.
func (m *BankMutation) ClearDebits() {
	m.cleareddebits = true
}

// DebitsCleared reports if the "debits" edge to the Bank_Transfer entity was cleared.
func (m *BankMutation) DebitsCleared() bool {
	return m.cleareddebits
}

// RemoveDebitIDs removes the "debits" edge to the Bank_Transfer entity by IDs.
func (m *BankMutation) RemoveDebitIDs(ids ...uuid.UUID) {
	if m.removeddebits == nil {
		m.removeddebits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.debits, ids[i])
		m.removeddebits[ids[i]] = struct{}{}
	}
}

// RemovedDebits returns the removed IDs of the "debits" edge to the Bank_Transfer entity.
func (m *BankMutation) RemovedDebitsIDs() (ids []uuid.UUID) {
	for id := range m.removeddebits {
		ids = append(ids, id)
	}
	return
}

// DebitsIDs returns the "debits" edge IDs in the mutation.
func (m *BankMutation) DebitsIDs() (ids []uuid.UUID) {
	for id := range m.debits {
		ids = append(ids, id)
	}
	return
}

// ResetDebits resets all changes to the "debits" edge.
func (m *BankMutation) ResetDebits() {
	m.debits = nil
	m.cleareddebits = false
	m.removeddebits = nil
}

// AddCreditIDs adds the "credits" edge to the Bank_Transfer entity by ids.
func (m *BankMutation) AddCreditIDs(ids ...uuid.UUID) {
	if m.credits == nil {
		m.credits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.credits[ids[i]] = struct{}{}
	}
}

// ClearCredits clears the "credits" edge to the Bank_Transfer entity.
func (m *BankMutation) ClearCredits() {
	m.clearedcredits = true
}

// CreditsCleared reports if the "credits" edge to the Bank_Transfer entity was cleared.
func (m *BankMutation) CreditsCleared() bool {
	return m.clearedcredits
}

// RemoveCreditIDs removes the "credits" edge to the Bank_Transfer entity by IDs.
func (m *BankMutation) RemoveCreditIDs(ids ...uuid.UUID) {
	if m.removedcredits == nil {
		m.removedcredits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.credits, ids[i])
		m.removedcredits[ids[i]] = struct{}{}
	}
}

// RemovedCredits returns the removed IDs of the "credits" edge to the Bank_Transfer entity.
func (m *BankMutation) RemovedCreditsIDs() (ids []uuid.UUID) {
	for id := range m.removedcredits {
		ids = append(ids, id)
	}
	return
}

// CreditsIDs returns the "credits" edge IDs in the mutation.
func (m *BankMutation) CreditsIDs() (ids []uuid.UUID) {
	for id := range m.credits {
		ids = append(ids, id)
	}
	return
}

// ResetCredits resets all changes to the "credits" edge.
func (m *BankMutation) ResetCredits() {
	m.credits = nil
	m.clearedcredits = false
	m.removedcredits = nil
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by ids.
func (m *BankMutation) AddTransactionIDs(ids ...uuid.UUID) {
	if m.transactions == nil {
		m.transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the Transaction entity.
func (m *BankMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the Transaction entity was cleared.
func (m *BankMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the Transaction entity by IDs.
func (m *BankMutation) RemoveTransactionIDs(ids ...uuid.UUID) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the Transaction entity.
func (m *BankMutation) RemovedTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *BankMutation) TransactionsIDs() (ids []uuid.UUID) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *BankMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the BankMutation builder.
func (m *BankMutation) Where(ps ...predicate.Bank) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BankMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BankMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bank, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BankMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BankMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bank).
func (m *BankMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BankMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, bank.FieldName)
	}
	if m.account_number != nil {
		fields = append(fields, bank.FieldAccountNumber)
	}
	if m.ifsc_code != nil {
		fields = append(fields, bank.FieldIfscCode)
	}
	if m.branch_name != nil {
		fields = append(fields, bank.FieldBranchName)
	}
	if m.metadata != nil {
		fields = append(fields, bank.FieldMetadata)
	}
	if m.created_at != nil {
		fields = append(fields, bank.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bank.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BankMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bank.FieldName:
		return m.Name()
	case bank.FieldAccountNumber:
		return m.AccountNumber()
	case bank.FieldIfscCode:
		return m.IfscCode()
	case bank.FieldBranchName:
		return m.BranchName()
	case bank.FieldMetadata:
		return m.Metadata()
	case bank.FieldCreatedAt:
		return m.CreatedAt()
	case bank.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BankMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bank.FieldName:
		return m.OldName(ctx)
	case bank.FieldAccountNumber:
		return m.OldAccountNumber(ctx)
	case bank.FieldIfscCode:
		return m.OldIfscCode(ctx)
	case bank.FieldBranchName:
		return m.OldBranchName(ctx)
	case bank.FieldMetadata:
		return m.OldMetadata(ctx)
	case bank.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bank.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bank field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bank.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bank.FieldAccountNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountNumber(v)
		return nil
	case bank.FieldIfscCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIfscCode(v)
		return nil
	case bank.FieldBranchName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBranchName(v)
		return nil
	case bank.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case bank.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bank.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BankMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BankMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bank numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BankMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bank.FieldAccountNumber) {
		fields = append(fields, bank.FieldAccountNumber)
	}
	if m.FieldCleared(bank.FieldIfscCode) {
		fields = append(fields, bank.FieldIfscCode)
	}
	if m.FieldCleared(bank.FieldBranchName) {
		fields = append(fields, bank.FieldBranchName)
	}
	if m.FieldCleared(bank.FieldMetadata) {
		fields = append(fields, bank.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BankMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankMutation) ClearField(name string) error {
	switch name {
	case bank.FieldAccountNumber:
		m.ClearAccountNumber()
		return nil
	case bank.FieldIfscCode:
		m.ClearIfscCode()
		return nil
	case bank.FieldBranchName:
		m.ClearBranchName()
		return nil
	case bank.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown Bank nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BankMutation) ResetField(name string) error {
	switch name {
	case bank.FieldName:
		m.ResetName()
		return nil
	case bank.FieldAccountNumber:
		m.ResetAccountNumber()
		return nil
	case bank.FieldIfscCode:
		m.ResetIfscCode()
		return nil
	case bank.FieldBranchName:
		m.ResetBranchName()
		return nil
	case bank.FieldMetadata:
		m.ResetMetadata()
		return nil
	case bank.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bank.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Bank field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BankMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.debits != nil {
		edges = append(edges, bank.EdgeDebits)
	}
	if m.credits != nil {
		edges = append(edges, bank.EdgeCredits)
	}
	if m.transactions != nil {
		edges = append(edges, bank.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BankMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeDebits:
		ids := make([]ent.Value, 0, len(m.debits))
		for id := range m.debits {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeCredits:
		ids := make([]ent.Value, 0, len(m.credits))
		for id := range m.credits {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BankMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddebits != nil {
		edges = append(edges, bank.EdgeDebits)
	}
	if m.removedcredits != nil {
		edges = append(edges, bank.EdgeCredits)
	}
	if m.removedtransactions != nil {
		edges = append(edges, bank.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BankMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bank.EdgeDebits:
		ids := make([]ent.Value, 0, len(m.removeddebits))
		for id := range m.removeddebits {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeCredits:
		ids := make([]ent.Value, 0, len(m.removedcredits))
		for id := range m.removedcredits {
			ids = append(ids, id)
		}
		return ids
	case bank.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BankMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddebits {
		edges = append(edges, bank.EdgeDebits)
	}
	if m.clearedcredits {
		edges = append(edges, bank.EdgeCredits)
	}
	if m.clearedtransactions {
		edges = append(edges, bank.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BankMutation) EdgeCleared(name string) bool {
	switch name {
	case bank.EdgeDebits:
		return m.cleareddebits
	case bank.EdgeCredits:
		return m.clearedcredits
	case bank.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BankMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bank unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BankMutation) ResetEdge(name string) error {
	switch name {
	case bank.EdgeDebits:
		m.ResetDebits()
		return nil
	case bank.EdgeCredits:
		m.ResetCredits()
		return nil
	case bank.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown Bank edge %s", name)
}

// BankTransferMutation represents an operation that mutates the Bank_Transfer nodes in the graph.
type BankTransferMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	amount              *float64
	addamount           *float64
	transaction_date    *time.Time
	notes               *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	from_bank           *uuid.UUID
	clearedfrom_bank    bool
	to_bank             *uuid.UUID
	clearedto_bank      bool
	transactions        map[uuid.UUID]struct{}
	removedtransactions map[uuid.UUID]struct{}
	clearedtransactions bool
	done                bool
	oldValue            func(context.Context) (*Bank_Transfer, error)
	predicates          []predicate.Bank_Transfer
}

var _ ent.Mutation = (*BankTransferMutation)(nil)

// bankTransferOption allows management of the mutation configuration using functional options.
type bankTransferOption func(*BankTransferMutation)

// newBankTransferMutation creates new mutation for the Bank_Transfer entity.
func newBankTransferMutation(c config, op Op, opts ...bankTransferOption) *BankTransferMutation {
	m := &BankTransferMutation{
		config:        c,
		op:            op,
		typ:           TypeBankTransfer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBank_TransferID sets the ID field of the mutation.
func withBank_TransferID(id uuid.UUID) bankTransferOption {
	return func(m *BankTransferMutation) {
		var (
			err   error
			once  sync.Once
			value *Bank_Transfer
		)
		m.oldValue = func(ctx context.Context) (*Bank_Transfer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bank_Transfer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBank_Transfer sets the old Bank_Transfer of the mutation.
func withBank_Transfer(node *Bank_Transfer) bankTransferOption {
	return func(m *BankTransferMutation) {
		m.oldValue = func(context.Context) (*Bank_Transfer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankTransferMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankTransferMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Bank_Transfer entities.
func (m *BankTransferMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BankTransferMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BankTransferMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bank_Transfer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *BankTransferMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *BankTransferMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *BankTransferMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *BankTransferMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *BankTransferMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetFromBankID sets the "from_bank_id" field.
func (m *BankTransferMutation) SetFromBankID(u uuid.UUID) {
	m.from_bank = &u
}

// FromBankID returns the value of the "from_bank_id" field in the mutation.
func (m *BankTransferMutation) FromBankID() (r uuid.UUID, exists bool) {
	v := m.from_bank
	if v == nil {
		return
	}
	return *v, true
}

// OldFromBankID returns the old "from_bank_id" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldFromBankID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromBankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromBankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromBankID: %w", err)
	}
	return oldValue.FromBankID, nil
}

// ResetFromBankID resets all changes to the "from_bank_id" field.
func (m *BankTransferMutation) ResetFromBankID() {
	m.from_bank = nil
}

// SetToBankID sets the "to_bank_id" field.
func (m *BankTransferMutation) SetToBankID(u uuid.UUID) {
	m.to_bank = &u
}

// ToBankID returns the value of the "to_bank_id" field in the mutation.
func (m *BankTransferMutation) ToBankID() (r uuid.UUID, exists bool) {
	v := m.to_bank
	if v == nil {
		return
	}
	return *v, true
}

// OldToBankID returns the old "to_bank_id" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldToBankID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToBankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToBankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToBankID: %w", err)
	}
	return oldValue.ToBankID, nil
}

// ResetToBankID resets all changes to the "to_bank_id" field.
func (m *BankTransferMutation) ResetToBankID() {
	m.to_bank = nil
}

// SetTransactionDate sets the "transaction_date" field.
func (m *BankTransferMutation) SetTransactionDate(t time.Time) {
	m.transaction_date = &t
}

// TransactionDate returns the value of the "transaction_date" field in the mutation.
func (m *BankTransferMutation) TransactionDate() (r time.Time, exists bool) {
	v := m.transaction_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionDate returns the old "transaction_date" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldTransactionDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionDate: %w", err)
	}
	return oldValue.TransactionDate, nil
}

// ResetTransactionDate resets all changes to the "transaction_date" field.
func (m *BankTransferMutation) ResetTransactionDate() {
	m.transaction_date = nil
}

// SetNotes sets the "notes" field.
func (m *BankTransferMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *BankTransferMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *BankTransferMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[bank_transfer.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *BankTransferMutation) NotesCleared() bool {
	_, ok := m.clearedFields[bank_transfer.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *BankTransferMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, bank_transfer.FieldNotes)
}

// SetCreatedAt sets the "created_at" field.
func (m *BankTransferMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BankTransferMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BankTransferMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BankTransferMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BankTransferMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bank_Transfer entity.
// If the Bank_Transfer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BankTransferMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BankTransferMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearFromBank clears the "from_bank" edge to the Bank entity.
func (m *BankTransferMutation) ClearFromBank() {
	m.clearedfrom_bank = true
	m.clearedFields[bank_transfer.FieldFromBankID] = struct{}{}
}

// FromBankCleared reports if the "from_bank" edge to the Bank entity was cleared.
func (m *BankTransferMutation) FromBankCleared() bool {
	return m.clearedfrom_bank
}

// FromBankIDs returns the "from_bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromBankID instead. It exists only for internal usage by the builders.
func (m *BankTransferMutation) FromBankIDs() (ids []uuid.UUID) {
	if id := m.from_bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromBank resets all changes to the "from_bank" edge.
func (m *BankTransferMutation) ResetFromBank() {
	m.from_bank = nil
	m.clearedfrom_bank = false
}

// ClearToBank clears the "to_bank" edge to the Bank entity.
func (m *BankTransferMutation) ClearToBank() {
	m.clearedto_bank = true
	m.clearedFields[bank_transfer.FieldToBankID] = struct{}{}
}

// ToBankCleared reports if the "to_bank" edge to the Bank entity was cleared.
func (m *BankTransferMutation) ToBankCleared() bool {
	return m.clearedto_bank
}

// ToBankIDs returns the "to_bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ToBankID instead. It exists only for internal usage by the builders.
func (m *BankTransferMutation) ToBankIDs() (ids []uuid.UUID) {
	if id := m.to_bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetToBank resets all changes to the "to_bank" edge.
func (m *BankTransferMutation) ResetToBank() {
	m.to_bank = nil
	m.clearedto_bank = false
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by ids.
func (m *BankTransferMutation) AddTransactionIDs(ids ...uuid.UUID) {
	if m.transactions == nil {
		m.transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the Transaction entity.
func (m *BankTransferMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the Transaction entity was cleared.
func (m *BankTransferMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the Transaction entity by IDs.
func (m *BankTransferMutation) RemoveTransactionIDs(ids ...uuid.UUID) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the Transaction entity.
func (m *BankTransferMutation) RemovedTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *BankTransferMutation) TransactionsIDs() (ids []uuid.UUID) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *BankTransferMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the BankTransferMutation builder.
func (m *BankTransferMutation) Where(ps ...predicate.Bank_Transfer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BankTransferMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BankTransferMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Bank_Transfer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BankTransferMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BankTransferMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Bank_Transfer).
func (m *BankTransferMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BankTransferMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.amount != nil {
		fields = append(fields, bank_transfer.FieldAmount)
	}
	if m.from_bank != nil {
		fields = append(fields, bank_transfer.FieldFromBankID)
	}
	if m.to_bank != nil {
		fields = append(fields, bank_transfer.FieldToBankID)
	}
	if m.transaction_date != nil {
		fields = append(fields, bank_transfer.FieldTransactionDate)
	}
	if m.notes != nil {
		fields = append(fields, bank_transfer.FieldNotes)
	}
	if m.created_at != nil {
		fields = append(fields, bank_transfer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bank_transfer.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BankTransferMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bank_transfer.FieldAmount:
		return m.Amount()
	case bank_transfer.FieldFromBankID:
		return m.FromBankID()
	case bank_transfer.FieldToBankID:
		return m.ToBankID()
	case bank_transfer.FieldTransactionDate:
		return m.TransactionDate()
	case bank_transfer.FieldNotes:
		return m.Notes()
	case bank_transfer.FieldCreatedAt:
		return m.CreatedAt()
	case bank_transfer.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BankTransferMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bank_transfer.FieldAmount:
		return m.OldAmount(ctx)
	case bank_transfer.FieldFromBankID:
		return m.OldFromBankID(ctx)
	case bank_transfer.FieldToBankID:
		return m.OldToBankID(ctx)
	case bank_transfer.FieldTransactionDate:
		return m.OldTransactionDate(ctx)
	case bank_transfer.FieldNotes:
		return m.OldNotes(ctx)
	case bank_transfer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bank_transfer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Bank_Transfer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankTransferMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bank_transfer.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case bank_transfer.FieldFromBankID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromBankID(v)
		return nil
	case bank_transfer.FieldToBankID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToBankID(v)
		return nil
	case bank_transfer.FieldTransactionDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionDate(v)
		return nil
	case bank_transfer.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	case bank_transfer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bank_transfer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BankTransferMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, bank_transfer.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BankTransferMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bank_transfer.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BankTransferMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bank_transfer.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BankTransferMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bank_transfer.FieldNotes) {
		fields = append(fields, bank_transfer.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BankTransferMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankTransferMutation) ClearField(name string) error {
	switch name {
	case bank_transfer.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BankTransferMutation) ResetField(name string) error {
	switch name {
	case bank_transfer.FieldAmount:
		m.ResetAmount()
		return nil
	case bank_transfer.FieldFromBankID:
		m.ResetFromBankID()
		return nil
	case bank_transfer.FieldToBankID:
		m.ResetToBankID()
		return nil
	case bank_transfer.FieldTransactionDate:
		m.ResetTransactionDate()
		return nil
	case bank_transfer.FieldNotes:
		m.ResetNotes()
		return nil
	case bank_transfer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bank_transfer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BankTransferMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.from_bank != nil {
		edges = append(edges, bank_transfer.EdgeFromBank)
	}
	if m.to_bank != nil {
		edges = append(edges, bank_transfer.EdgeToBank)
	}
	if m.transactions != nil {
		edges = append(edges, bank_transfer.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BankTransferMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bank_transfer.EdgeFromBank:
		if id := m.from_bank; id != nil {
			return []ent.Value{*id}
		}
	case bank_transfer.EdgeToBank:
		if id := m.to_bank; id != nil {
			return []ent.Value{*id}
		}
	case bank_transfer.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BankTransferMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtransactions != nil {
		edges = append(edges, bank_transfer.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BankTransferMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bank_transfer.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BankTransferMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedfrom_bank {
		edges = append(edges, bank_transfer.EdgeFromBank)
	}
	if m.clearedto_bank {
		edges = append(edges, bank_transfer.EdgeToBank)
	}
	if m.clearedtransactions {
		edges = append(edges, bank_transfer.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BankTransferMutation) EdgeCleared(name string) bool {
	switch name {
	case bank_transfer.EdgeFromBank:
		return m.clearedfrom_bank
	case bank_transfer.EdgeToBank:
		return m.clearedto_bank
	case bank_transfer.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BankTransferMutation) ClearEdge(name string) error {
	switch name {
	case bank_transfer.EdgeFromBank:
		m.ClearFromBank()
		return nil
	case bank_transfer.EdgeToBank:
		m.ClearToBank()
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BankTransferMutation) ResetEdge(name string) error {
	switch name {
	case bank_transfer.EdgeFromBank:
		m.ResetFromBank()
		return nil
	case bank_transfer.EdgeToBank:
		m.ResetToBank()
		return nil
	case bank_transfer.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown Bank_Transfer edge %s", name)
}

// CategoryMutation represents an operation that mutates the Category nodes in the graph.
type CategoryMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	description         *string
	clearedFields       map[string]struct{}
	transactions        map[uuid.UUID]struct{}
	removedtransactions map[uuid.UUID]struct{}
	clearedtransactions bool
	done                bool
	oldValue            func(context.Context) (*Category, error)
	predicates          []predicate.Category
}

var _ ent.Mutation = (*CategoryMutation)(nil)

// categoryOption allows management of the mutation configuration using functional options.
type categoryOption func(*CategoryMutation)

// newCategoryMutation creates new mutation for the Category entity.
func newCategoryMutation(c config, op Op, opts ...categoryOption) *CategoryMutation {
	m := &CategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCategoryID sets the ID field of the mutation.
func withCategoryID(id uuid.UUID) categoryOption {
	return func(m *CategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *Category
		)
		m.oldValue = func(ctx context.Context) (*Category, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Category.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCategory sets the old Category of the mutation.
func withCategory(node *Category) categoryOption {
	return func(m *CategoryMutation) {
		m.oldValue = func(context.Context) (*Category, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Category entities.
func (m *CategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Category.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CategoryMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *CategoryMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CategoryMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Category entity.
// If the Category object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CategoryMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CategoryMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[category.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CategoryMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[category.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CategoryMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, category.FieldDescription)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by ids.
func (m *CategoryMutation) AddTransactionIDs(ids ...uuid.UUID) {
	if m.transactions == nil {
		m.transactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.transactions[ids[i]] = struct{}{}
	}
}

// ClearTransactions clears the "transactions" edge to the Transaction entity.
func (m *CategoryMutation) ClearTransactions() {
	m.clearedtransactions = true
}

// TransactionsCleared reports if the "transactions" edge to the Transaction entity was cleared.
func (m *CategoryMutation) TransactionsCleared() bool {
	return m.clearedtransactions
}

// RemoveTransactionIDs removes the "transactions" edge to the Transaction entity by IDs.
func (m *CategoryMutation) RemoveTransactionIDs(ids ...uuid.UUID) {
	if m.removedtransactions == nil {
		m.removedtransactions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.transactions, ids[i])
		m.removedtransactions[ids[i]] = struct{}{}
	}
}

// RemovedTransactions returns the removed IDs of the "transactions" edge to the Transaction entity.
func (m *CategoryMutation) RemovedTransactionsIDs() (ids []uuid.UUID) {
	for id := range m.removedtransactions {
		ids = append(ids, id)
	}
	return
}

// TransactionsIDs returns the "transactions" edge IDs in the mutation.
func (m *CategoryMutation) TransactionsIDs() (ids []uuid.UUID) {
	for id := range m.transactions {
		ids = append(ids, id)
	}
	return
}

// ResetTransactions resets all changes to the "transactions" edge.
func (m *CategoryMutation) ResetTransactions() {
	m.transactions = nil
	m.clearedtransactions = false
	m.removedtransactions = nil
}

// Where appends a list predicates to the CategoryMutation builder.
func (m *CategoryMutation) Where(ps ...predicate.Category) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Category, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Category).
func (m *CategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CategoryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, category.FieldName)
	}
	if m.description != nil {
		fields = append(fields, category.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case category.FieldName:
		return m.Name()
	case category.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case category.FieldName:
		return m.OldName(ctx)
	case category.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Category field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case category.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case category.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Category numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CategoryMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(category.FieldDescription) {
		fields = append(fields, category.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CategoryMutation) ClearField(name string) error {
	switch name {
	case category.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Category nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CategoryMutation) ResetField(name string) error {
	switch name {
	case category.FieldName:
		m.ResetName()
		return nil
	case category.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Category field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.transactions != nil {
		edges = append(edges, category.EdgeTransactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.transactions))
		for id := range m.transactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtransactions != nil {
		edges = append(edges, category.EdgeTransactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case category.EdgeTransactions:
		ids := make([]ent.Value, 0, len(m.removedtransactions))
		for id := range m.removedtransactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtransactions {
		edges = append(edges, category.EdgeTransactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case category.EdgeTransactions:
		return m.clearedtransactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Category unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CategoryMutation) ResetEdge(name string) error {
	switch name {
	case category.EdgeTransactions:
		m.ResetTransactions()
		return nil
	}
	return fmt.Errorf("unknown Category edge %s", name)
}

// CreditCardMutation represents an operation that mutates the CreditCard nodes in the graph.
type CreditCardMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CreditCard, error)
	predicates    []predicate.CreditCard
}

var _ ent.Mutation = (*CreditCardMutation)(nil)

// creditcardOption allows management of the mutation configuration using functional options.
type creditcardOption func(*CreditCardMutation)

// newCreditCardMutation creates new mutation for the CreditCard entity.
func newCreditCardMutation(c config, op Op, opts ...creditcardOption) *CreditCardMutation {
	m := &CreditCardMutation{
		config:        c,
		op:            op,
		typ:           TypeCreditCard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCreditCardID sets the ID field of the mutation.
func withCreditCardID(id int) creditcardOption {
	return func(m *CreditCardMutation) {
		var (
			err   error
			once  sync.Once
			value *CreditCard
		)
		m.oldValue = func(ctx context.Context) (*CreditCard, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CreditCard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCreditCard sets the old CreditCard of the mutation.
func withCreditCard(node *CreditCard) creditcardOption {
	return func(m *CreditCardMutation) {
		m.oldValue = func(context.Context) (*CreditCard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CreditCardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CreditCardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CreditCardMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CreditCardMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CreditCard.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the CreditCardMutation builder.
func (m *CreditCardMutation) Where(ps ...predicate.CreditCard) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CreditCardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CreditCardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CreditCard, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CreditCardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CreditCardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CreditCard).
func (m *CreditCardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CreditCardMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CreditCardMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CreditCardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown CreditCard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditCardMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CreditCard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CreditCardMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CreditCardMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CreditCardMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown CreditCard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CreditCardMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CreditCardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CreditCardMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CreditCard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CreditCardMutation) ResetField(name string) error {
	return fmt.Errorf("unknown CreditCard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CreditCardMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CreditCardMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CreditCardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CreditCardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CreditCardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CreditCardMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CreditCardMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CreditCard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CreditCardMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CreditCard edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	amount           *float64
	addamount        *float64
	transaction_type *transaction.TransactionType
	transfer_type    *transaction.TransferType
	transaction_date *time.Time
	notes            *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	bank             *uuid.UUID
	clearedbank      bool
	category         *uuid.UUID
	clearedcategory  bool
	transfer         *uuid.UUID
	clearedtransfer  bool
	done             bool
	oldValue         func(context.Context) (*Transaction, error)
	predicates       []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id uuid.UUID) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Transaction entities.
func (m *TransactionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *TransactionMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *TransactionMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *TransactionMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *TransactionMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *TransactionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetBankID sets the "bank_id" field.
func (m *TransactionMutation) SetBankID(u uuid.UUID) {
	m.bank = &u
}

// BankID returns the value of the "bank_id" field in the mutation.
func (m *TransactionMutation) BankID() (r uuid.UUID, exists bool) {
	v := m.bank
	if v == nil {
		return
	}
	return *v, true
}

// OldBankID returns the old "bank_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldBankID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBankID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBankID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankID: %w", err)
	}
	return oldValue.BankID, nil
}

// ResetBankID resets all changes to the "bank_id" field.
func (m *TransactionMutation) ResetBankID() {
	m.bank = nil
}

// SetCategoryID sets the "category_id" field.
func (m *TransactionMutation) SetCategoryID(u uuid.UUID) {
	m.category = &u
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *TransactionMutation) CategoryID() (r uuid.UUID, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldCategoryID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *TransactionMutation) ClearCategoryID() {
	m.category = nil
	m.clearedFields[transaction.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *TransactionMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *TransactionMutation) ResetCategoryID() {
	m.category = nil
	delete(m.clearedFields, transaction.FieldCategoryID)
}

// SetTransferID sets the "transfer_id" field.
func (m *TransactionMutation) SetTransferID(u uuid.UUID) {
	m.transfer = &u
}

// TransferID returns the value of the "transfer_id" field in the mutation.
func (m *TransactionMutation) TransferID() (r uuid.UUID, exists bool) {
	v := m.transfer
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferID returns the old "transfer_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransferID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferID: %w", err)
	}
	return oldValue.TransferID, nil
}

// ClearTransferID clears the value of the "transfer_id" field.
func (m *TransactionMutation) ClearTransferID() {
	m.transfer = nil
	m.clearedFields[transaction.FieldTransferID] = struct{}{}
}

// TransferIDCleared returns if the "transfer_id" field was cleared in this mutation.
func (m *TransactionMutation) TransferIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldTransferID]
	return ok
}

// ResetTransferID resets all changes to the "transfer_id" field.
func (m *TransactionMutation) ResetTransferID() {
	m.transfer = nil
	delete(m.clearedFields, transaction.FieldTransferID)
}

// SetTransactionType sets the "transaction_type" field.
func (m *TransactionMutation) SetTransactionType(tt transaction.TransactionType) {
	m.transaction_type = &tt
}

// TransactionType returns the value of the "transaction_type" field in the mutation.
func (m *TransactionMutation) TransactionType() (r transaction.TransactionType, exists bool) {
	v := m.transaction_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionType returns the old "transaction_type" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransactionType(ctx context.Context) (v transaction.TransactionType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionType: %w", err)
	}
	return oldValue.TransactionType, nil
}

// ResetTransactionType resets all changes to the "transaction_type" field.
func (m *TransactionMutation) ResetTransactionType() {
	m.transaction_type = nil
}

// SetTransferType sets the "transfer_type" field.
func (m *TransactionMutation) SetTransferType(tt transaction.TransferType) {
	m.transfer_type = &tt
}

// TransferType returns the value of the "transfer_type" field in the mutation.
func (m *TransactionMutation) TransferType() (r transaction.TransferType, exists bool) {
	v := m.transfer_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTransferType returns the old "transfer_type" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransferType(ctx context.Context) (v *transaction.TransferType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransferType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransferType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransferType: %w", err)
	}
	return oldValue.TransferType, nil
}

// ResetTransferType resets all changes to the "transfer_type" field.
func (m *TransactionMutation) ResetTransferType() {
	m.transfer_type = nil
}

// SetTransactionDate sets the "transaction_date" field.
func (m *TransactionMutation) SetTransactionDate(t time.Time) {
	m.transaction_date = &t
}

// TransactionDate returns the value of the "transaction_date" field in the mutation.
func (m *TransactionMutation) TransactionDate() (r time.Time, exists bool) {
	v := m.transaction_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionDate returns the old "transaction_date" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransactionDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionDate: %w", err)
	}
	return oldValue.TransactionDate, nil
}

// ResetTransactionDate resets all changes to the "transaction_date" field.
func (m *TransactionMutation) ResetTransactionDate() {
	m.transaction_date = nil
}

// SetNotes sets the "notes" field.
func (m *TransactionMutation) SetNotes(s string) {
	m.notes = &s
}

// Notes returns the value of the "notes" field in the mutation.
func (m *TransactionMutation) Notes() (r string, exists bool) {
	v := m.notes
	if v == nil {
		return
	}
	return *v, true
}

// OldNotes returns the old "notes" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldNotes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotes: %w", err)
	}
	return oldValue.Notes, nil
}

// ClearNotes clears the value of the "notes" field.
func (m *TransactionMutation) ClearNotes() {
	m.notes = nil
	m.clearedFields[transaction.FieldNotes] = struct{}{}
}

// NotesCleared returns if the "notes" field was cleared in this mutation.
func (m *TransactionMutation) NotesCleared() bool {
	_, ok := m.clearedFields[transaction.FieldNotes]
	return ok
}

// ResetNotes resets all changes to the "notes" field.
func (m *TransactionMutation) ResetNotes() {
	m.notes = nil
	delete(m.clearedFields, transaction.FieldNotes)
}

// SetCreatedAt sets the "created_at" field.
func (m *TransactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TransactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TransactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TransactionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TransactionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TransactionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearBank clears the "bank" edge to the Bank entity.
func (m *TransactionMutation) ClearBank() {
	m.clearedbank = true
	m.clearedFields[transaction.FieldBankID] = struct{}{}
}

// BankCleared reports if the "bank" edge to the Bank entity was cleared.
func (m *TransactionMutation) BankCleared() bool {
	return m.clearedbank
}

// BankIDs returns the "bank" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// BankID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) BankIDs() (ids []uuid.UUID) {
	if id := m.bank; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBank resets all changes to the "bank" edge.
func (m *TransactionMutation) ResetBank() {
	m.bank = nil
	m.clearedbank = false
}

// ClearCategory clears the "category" edge to the Category entity.
func (m *TransactionMutation) ClearCategory() {
	m.clearedcategory = true
	m.clearedFields[transaction.FieldCategoryID] = struct{}{}
}

// CategoryCleared reports if the "category" edge to the Category entity was cleared.
func (m *TransactionMutation) CategoryCleared() bool {
	return m.CategoryIDCleared() || m.clearedcategory
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) CategoryIDs() (ids []uuid.UUID) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *TransactionMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// ClearTransfer clears the "transfer" edge to the Bank_Transfer entity.
func (m *TransactionMutation) ClearTransfer() {
	m.clearedtransfer = true
	m.clearedFields[transaction.FieldTransferID] = struct{}{}
}

// TransferCleared reports if the "transfer" edge to the Bank_Transfer entity was cleared.
func (m *TransactionMutation) TransferCleared() bool {
	return m.TransferIDCleared() || m.clearedtransfer
}

// TransferIDs returns the "transfer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TransferID instead. It exists only for internal usage by the builders.
func (m *TransactionMutation) TransferIDs() (ids []uuid.UUID) {
	if id := m.transfer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTransfer resets all changes to the "transfer" edge.
func (m *TransactionMutation) ResetTransfer() {
	m.transfer = nil
	m.clearedtransfer = false
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.amount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	if m.bank != nil {
		fields = append(fields, transaction.FieldBankID)
	}
	if m.category != nil {
		fields = append(fields, transaction.FieldCategoryID)
	}
	if m.transfer != nil {
		fields = append(fields, transaction.FieldTransferID)
	}
	if m.transaction_type != nil {
		fields = append(fields, transaction.FieldTransactionType)
	}
	if m.transfer_type != nil {
		fields = append(fields, transaction.FieldTransferType)
	}
	if m.transaction_date != nil {
		fields = append(fields, transaction.FieldTransactionDate)
	}
	if m.notes != nil {
		fields = append(fields, transaction.FieldNotes)
	}
	if m.created_at != nil {
		fields = append(fields, transaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, transaction.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.Amount()
	case transaction.FieldBankID:
		return m.BankID()
	case transaction.FieldCategoryID:
		return m.CategoryID()
	case transaction.FieldTransferID:
		return m.TransferID()
	case transaction.FieldTransactionType:
		return m.TransactionType()
	case transaction.FieldTransferType:
		return m.TransferType()
	case transaction.FieldTransactionDate:
		return m.TransactionDate()
	case transaction.FieldNotes:
		return m.Notes()
	case transaction.FieldCreatedAt:
		return m.CreatedAt()
	case transaction.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldAmount:
		return m.OldAmount(ctx)
	case transaction.FieldBankID:
		return m.OldBankID(ctx)
	case transaction.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case transaction.FieldTransferID:
		return m.OldTransferID(ctx)
	case transaction.FieldTransactionType:
		return m.OldTransactionType(ctx)
	case transaction.FieldTransferType:
		return m.OldTransferType(ctx)
	case transaction.FieldTransactionDate:
		return m.OldTransactionDate(ctx)
	case transaction.FieldNotes:
		return m.OldNotes(ctx)
	case transaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case transaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case transaction.FieldBankID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankID(v)
		return nil
	case transaction.FieldCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case transaction.FieldTransferID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferID(v)
		return nil
	case transaction.FieldTransactionType:
		v, ok := value.(transaction.TransactionType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionType(v)
		return nil
	case transaction.FieldTransferType:
		v, ok := value.(transaction.TransferType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransferType(v)
		return nil
	case transaction.FieldTransactionDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionDate(v)
		return nil
	case transaction.FieldNotes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotes(v)
		return nil
	case transaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case transaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, transaction.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transaction.FieldCategoryID) {
		fields = append(fields, transaction.FieldCategoryID)
	}
	if m.FieldCleared(transaction.FieldTransferID) {
		fields = append(fields, transaction.FieldTransferID)
	}
	if m.FieldCleared(transaction.FieldNotes) {
		fields = append(fields, transaction.FieldNotes)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	switch name {
	case transaction.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	case transaction.FieldTransferID:
		m.ClearTransferID()
		return nil
	case transaction.FieldNotes:
		m.ClearNotes()
		return nil
	}
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldAmount:
		m.ResetAmount()
		return nil
	case transaction.FieldBankID:
		m.ResetBankID()
		return nil
	case transaction.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case transaction.FieldTransferID:
		m.ResetTransferID()
		return nil
	case transaction.FieldTransactionType:
		m.ResetTransactionType()
		return nil
	case transaction.FieldTransferType:
		m.ResetTransferType()
		return nil
	case transaction.FieldTransactionDate:
		m.ResetTransactionDate()
		return nil
	case transaction.FieldNotes:
		m.ResetNotes()
		return nil
	case transaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case transaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.bank != nil {
		edges = append(edges, transaction.EdgeBank)
	}
	if m.category != nil {
		edges = append(edges, transaction.EdgeCategory)
	}
	if m.transfer != nil {
		edges = append(edges, transaction.EdgeTransfer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeBank:
		if id := m.bank; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case transaction.EdgeTransfer:
		if id := m.transfer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedbank {
		edges = append(edges, transaction.EdgeBank)
	}
	if m.clearedcategory {
		edges = append(edges, transaction.EdgeCategory)
	}
	if m.clearedtransfer {
		edges = append(edges, transaction.EdgeTransfer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	switch name {
	case transaction.EdgeBank:
		return m.clearedbank
	case transaction.EdgeCategory:
		return m.clearedcategory
	case transaction.EdgeTransfer:
		return m.clearedtransfer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	switch name {
	case transaction.EdgeBank:
		m.ClearBank()
		return nil
	case transaction.EdgeCategory:
		m.ClearCategory()
		return nil
	case transaction.EdgeTransfer:
		m.ClearTransfer()
		return nil
	}
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	switch name {
	case transaction.EdgeBank:
		m.ResetBank()
		return nil
	case transaction.EdgeCategory:
		m.ResetCategory()
		return nil
	case transaction.EdgeTransfer:
		m.ResetTransfer()
		return nil
	}
	return fmt.Errorf("unknown Transaction edge %s", name)
}
