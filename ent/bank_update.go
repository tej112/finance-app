// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/predicate"
	"finance/ent/transaction"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankUpdate is the builder for updating Bank entities.
type BankUpdate struct {
	config
	hooks    []Hook
	mutation *BankMutation
}

// Where appends a list predicates to the BankUpdate builder.
func (bu *BankUpdate) Where(ps ...predicate.Bank) *BankUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BankUpdate) SetName(s string) *BankUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (bu *BankUpdate) SetNillableName(s *string) *BankUpdate {
	if s != nil {
		bu.SetName(*s)
	}
	return bu
}

// SetAccountNumber sets the "account_number" field.
func (bu *BankUpdate) SetAccountNumber(s string) *BankUpdate {
	bu.mutation.SetAccountNumber(s)
	return bu
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (bu *BankUpdate) SetNillableAccountNumber(s *string) *BankUpdate {
	if s != nil {
		bu.SetAccountNumber(*s)
	}
	return bu
}

// ClearAccountNumber clears the value of the "account_number" field.
func (bu *BankUpdate) ClearAccountNumber() *BankUpdate {
	bu.mutation.ClearAccountNumber()
	return bu
}

// SetIfscCode sets the "ifsc_code" field.
func (bu *BankUpdate) SetIfscCode(s string) *BankUpdate {
	bu.mutation.SetIfscCode(s)
	return bu
}

// SetNillableIfscCode sets the "ifsc_code" field if the given value is not nil.
func (bu *BankUpdate) SetNillableIfscCode(s *string) *BankUpdate {
	if s != nil {
		bu.SetIfscCode(*s)
	}
	return bu
}

// ClearIfscCode clears the value of the "ifsc_code" field.
func (bu *BankUpdate) ClearIfscCode() *BankUpdate {
	bu.mutation.ClearIfscCode()
	return bu
}

// SetBranchName sets the "branch_name" field.
func (bu *BankUpdate) SetBranchName(s string) *BankUpdate {
	bu.mutation.SetBranchName(s)
	return bu
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (bu *BankUpdate) SetNillableBranchName(s *string) *BankUpdate {
	if s != nil {
		bu.SetBranchName(*s)
	}
	return bu
}

// ClearBranchName clears the value of the "branch_name" field.
func (bu *BankUpdate) ClearBranchName() *BankUpdate {
	bu.mutation.ClearBranchName()
	return bu
}

// SetMetadata sets the "metadata" field.
func (bu *BankUpdate) SetMetadata(m map[string]interface{}) *BankUpdate {
	bu.mutation.SetMetadata(m)
	return bu
}

// ClearMetadata clears the value of the "metadata" field.
func (bu *BankUpdate) ClearMetadata() *BankUpdate {
	bu.mutation.ClearMetadata()
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BankUpdate) SetCreatedAt(t time.Time) *BankUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BankUpdate) SetNillableCreatedAt(t *time.Time) *BankUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BankUpdate) SetUpdatedAt(t time.Time) *BankUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// AddDebitIDs adds the "debits" edge to the Bank_Transfer entity by IDs.
func (bu *BankUpdate) AddDebitIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.AddDebitIDs(ids...)
	return bu
}

// AddDebits adds the "debits" edges to the Bank_Transfer entity.
func (bu *BankUpdate) AddDebits(b ...*Bank_Transfer) *BankUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddDebitIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Bank_Transfer entity by IDs.
func (bu *BankUpdate) AddCreditIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.AddCreditIDs(ids...)
	return bu
}

// AddCredits adds the "credits" edges to the Bank_Transfer entity.
func (bu *BankUpdate) AddCredits(b ...*Bank_Transfer) *BankUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddCreditIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (bu *BankUpdate) AddTransactionIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.AddTransactionIDs(ids...)
	return bu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (bu *BankUpdate) AddTransactions(t ...*Transaction) *BankUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.AddTransactionIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bu *BankUpdate) Mutation() *BankMutation {
	return bu.mutation
}

// ClearDebits clears all "debits" edges to the Bank_Transfer entity.
func (bu *BankUpdate) ClearDebits() *BankUpdate {
	bu.mutation.ClearDebits()
	return bu
}

// RemoveDebitIDs removes the "debits" edge to Bank_Transfer entities by IDs.
func (bu *BankUpdate) RemoveDebitIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.RemoveDebitIDs(ids...)
	return bu
}

// RemoveDebits removes "debits" edges to Bank_Transfer entities.
func (bu *BankUpdate) RemoveDebits(b ...*Bank_Transfer) *BankUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveDebitIDs(ids...)
}

// ClearCredits clears all "credits" edges to the Bank_Transfer entity.
func (bu *BankUpdate) ClearCredits() *BankUpdate {
	bu.mutation.ClearCredits()
	return bu
}

// RemoveCreditIDs removes the "credits" edge to Bank_Transfer entities by IDs.
func (bu *BankUpdate) RemoveCreditIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.RemoveCreditIDs(ids...)
	return bu
}

// RemoveCredits removes "credits" edges to Bank_Transfer entities.
func (bu *BankUpdate) RemoveCredits(b ...*Bank_Transfer) *BankUpdate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveCreditIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (bu *BankUpdate) ClearTransactions() *BankUpdate {
	bu.mutation.ClearTransactions()
	return bu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (bu *BankUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *BankUpdate {
	bu.mutation.RemoveTransactionIDs(ids...)
	return bu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (bu *BankUpdate) RemoveTransactions(t ...*Transaction) *BankUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bu.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BankUpdate) Save(ctx context.Context) (int, error) {
	bu.defaults()
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BankUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BankUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BankUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bu *BankUpdate) defaults() {
	if _, ok := bu.mutation.UpdatedAt(); !ok {
		v := bank.UpdateDefaultUpdatedAt()
		bu.mutation.SetUpdatedAt(v)
	}
}

func (bu *BankUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bank.Table, bank.Columns, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.SetField(bank.FieldName, field.TypeString, value)
	}
	if value, ok := bu.mutation.AccountNumber(); ok {
		_spec.SetField(bank.FieldAccountNumber, field.TypeString, value)
	}
	if bu.mutation.AccountNumberCleared() {
		_spec.ClearField(bank.FieldAccountNumber, field.TypeString)
	}
	if value, ok := bu.mutation.IfscCode(); ok {
		_spec.SetField(bank.FieldIfscCode, field.TypeString, value)
	}
	if bu.mutation.IfscCodeCleared() {
		_spec.ClearField(bank.FieldIfscCode, field.TypeString)
	}
	if value, ok := bu.mutation.BranchName(); ok {
		_spec.SetField(bank.FieldBranchName, field.TypeString, value)
	}
	if bu.mutation.BranchNameCleared() {
		_spec.ClearField(bank.FieldBranchName, field.TypeString)
	}
	if value, ok := bu.mutation.Metadata(); ok {
		_spec.SetField(bank.FieldMetadata, field.TypeJSON, value)
	}
	if bu.mutation.MetadataCleared() {
		_spec.ClearField(bank.FieldMetadata, field.TypeJSON)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(bank.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(bank.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.DebitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedDebitsIDs(); len(nodes) > 0 && !bu.mutation.DebitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.DebitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedCreditsIDs(); len(nodes) > 0 && !bu.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !bu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BankUpdateOne is the builder for updating a single Bank entity.
type BankUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BankMutation
}

// SetName sets the "name" field.
func (buo *BankUpdateOne) SetName(s string) *BankUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableName(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetName(*s)
	}
	return buo
}

// SetAccountNumber sets the "account_number" field.
func (buo *BankUpdateOne) SetAccountNumber(s string) *BankUpdateOne {
	buo.mutation.SetAccountNumber(s)
	return buo
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableAccountNumber(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetAccountNumber(*s)
	}
	return buo
}

// ClearAccountNumber clears the value of the "account_number" field.
func (buo *BankUpdateOne) ClearAccountNumber() *BankUpdateOne {
	buo.mutation.ClearAccountNumber()
	return buo
}

// SetIfscCode sets the "ifsc_code" field.
func (buo *BankUpdateOne) SetIfscCode(s string) *BankUpdateOne {
	buo.mutation.SetIfscCode(s)
	return buo
}

// SetNillableIfscCode sets the "ifsc_code" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableIfscCode(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetIfscCode(*s)
	}
	return buo
}

// ClearIfscCode clears the value of the "ifsc_code" field.
func (buo *BankUpdateOne) ClearIfscCode() *BankUpdateOne {
	buo.mutation.ClearIfscCode()
	return buo
}

// SetBranchName sets the "branch_name" field.
func (buo *BankUpdateOne) SetBranchName(s string) *BankUpdateOne {
	buo.mutation.SetBranchName(s)
	return buo
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableBranchName(s *string) *BankUpdateOne {
	if s != nil {
		buo.SetBranchName(*s)
	}
	return buo
}

// ClearBranchName clears the value of the "branch_name" field.
func (buo *BankUpdateOne) ClearBranchName() *BankUpdateOne {
	buo.mutation.ClearBranchName()
	return buo
}

// SetMetadata sets the "metadata" field.
func (buo *BankUpdateOne) SetMetadata(m map[string]interface{}) *BankUpdateOne {
	buo.mutation.SetMetadata(m)
	return buo
}

// ClearMetadata clears the value of the "metadata" field.
func (buo *BankUpdateOne) ClearMetadata() *BankUpdateOne {
	buo.mutation.ClearMetadata()
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BankUpdateOne) SetCreatedAt(t time.Time) *BankUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BankUpdateOne) SetNillableCreatedAt(t *time.Time) *BankUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BankUpdateOne) SetUpdatedAt(t time.Time) *BankUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// AddDebitIDs adds the "debits" edge to the Bank_Transfer entity by IDs.
func (buo *BankUpdateOne) AddDebitIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.AddDebitIDs(ids...)
	return buo
}

// AddDebits adds the "debits" edges to the Bank_Transfer entity.
func (buo *BankUpdateOne) AddDebits(b ...*Bank_Transfer) *BankUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddDebitIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Bank_Transfer entity by IDs.
func (buo *BankUpdateOne) AddCreditIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.AddCreditIDs(ids...)
	return buo
}

// AddCredits adds the "credits" edges to the Bank_Transfer entity.
func (buo *BankUpdateOne) AddCredits(b ...*Bank_Transfer) *BankUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddCreditIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (buo *BankUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.AddTransactionIDs(ids...)
	return buo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (buo *BankUpdateOne) AddTransactions(t ...*Transaction) *BankUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.AddTransactionIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (buo *BankUpdateOne) Mutation() *BankMutation {
	return buo.mutation
}

// ClearDebits clears all "debits" edges to the Bank_Transfer entity.
func (buo *BankUpdateOne) ClearDebits() *BankUpdateOne {
	buo.mutation.ClearDebits()
	return buo
}

// RemoveDebitIDs removes the "debits" edge to Bank_Transfer entities by IDs.
func (buo *BankUpdateOne) RemoveDebitIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.RemoveDebitIDs(ids...)
	return buo
}

// RemoveDebits removes "debits" edges to Bank_Transfer entities.
func (buo *BankUpdateOne) RemoveDebits(b ...*Bank_Transfer) *BankUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveDebitIDs(ids...)
}

// ClearCredits clears all "credits" edges to the Bank_Transfer entity.
func (buo *BankUpdateOne) ClearCredits() *BankUpdateOne {
	buo.mutation.ClearCredits()
	return buo
}

// RemoveCreditIDs removes the "credits" edge to Bank_Transfer entities by IDs.
func (buo *BankUpdateOne) RemoveCreditIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.RemoveCreditIDs(ids...)
	return buo
}

// RemoveCredits removes "credits" edges to Bank_Transfer entities.
func (buo *BankUpdateOne) RemoveCredits(b ...*Bank_Transfer) *BankUpdateOne {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveCreditIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (buo *BankUpdateOne) ClearTransactions() *BankUpdateOne {
	buo.mutation.ClearTransactions()
	return buo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (buo *BankUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *BankUpdateOne {
	buo.mutation.RemoveTransactionIDs(ids...)
	return buo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (buo *BankUpdateOne) RemoveTransactions(t ...*Transaction) *BankUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return buo.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the BankUpdate builder.
func (buo *BankUpdateOne) Where(ps ...predicate.Bank) *BankUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BankUpdateOne) Select(field string, fields ...string) *BankUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bank entity.
func (buo *BankUpdateOne) Save(ctx context.Context) (*Bank, error) {
	buo.defaults()
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BankUpdateOne) SaveX(ctx context.Context) *Bank {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BankUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BankUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (buo *BankUpdateOne) defaults() {
	if _, ok := buo.mutation.UpdatedAt(); !ok {
		v := bank.UpdateDefaultUpdatedAt()
		buo.mutation.SetUpdatedAt(v)
	}
}

func (buo *BankUpdateOne) sqlSave(ctx context.Context) (_node *Bank, err error) {
	_spec := sqlgraph.NewUpdateSpec(bank.Table, bank.Columns, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bank.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bank.FieldID)
		for _, f := range fields {
			if !bank.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bank.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.SetField(bank.FieldName, field.TypeString, value)
	}
	if value, ok := buo.mutation.AccountNumber(); ok {
		_spec.SetField(bank.FieldAccountNumber, field.TypeString, value)
	}
	if buo.mutation.AccountNumberCleared() {
		_spec.ClearField(bank.FieldAccountNumber, field.TypeString)
	}
	if value, ok := buo.mutation.IfscCode(); ok {
		_spec.SetField(bank.FieldIfscCode, field.TypeString, value)
	}
	if buo.mutation.IfscCodeCleared() {
		_spec.ClearField(bank.FieldIfscCode, field.TypeString)
	}
	if value, ok := buo.mutation.BranchName(); ok {
		_spec.SetField(bank.FieldBranchName, field.TypeString, value)
	}
	if buo.mutation.BranchNameCleared() {
		_spec.ClearField(bank.FieldBranchName, field.TypeString)
	}
	if value, ok := buo.mutation.Metadata(); ok {
		_spec.SetField(bank.FieldMetadata, field.TypeJSON, value)
	}
	if buo.mutation.MetadataCleared() {
		_spec.ClearField(bank.FieldMetadata, field.TypeJSON)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(bank.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(bank.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.DebitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedDebitsIDs(); len(nodes) > 0 && !buo.mutation.DebitsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.DebitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedCreditsIDs(); len(nodes) > 0 && !buo.mutation.CreditsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !buo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Bank{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bank.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
