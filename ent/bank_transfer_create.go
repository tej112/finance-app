// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/transaction"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankTransferCreate is the builder for creating a Bank_Transfer entity.
type BankTransferCreate struct {
	config
	mutation *BankTransferMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (btc *BankTransferCreate) SetAmount(f float64) *BankTransferCreate {
	btc.mutation.SetAmount(f)
	return btc
}

// SetFromBankID sets the "from_bank_id" field.
func (btc *BankTransferCreate) SetFromBankID(u uuid.UUID) *BankTransferCreate {
	btc.mutation.SetFromBankID(u)
	return btc
}

// SetToBankID sets the "to_bank_id" field.
func (btc *BankTransferCreate) SetToBankID(u uuid.UUID) *BankTransferCreate {
	btc.mutation.SetToBankID(u)
	return btc
}

// SetTransactionDate sets the "transaction_date" field.
func (btc *BankTransferCreate) SetTransactionDate(t time.Time) *BankTransferCreate {
	btc.mutation.SetTransactionDate(t)
	return btc
}

// SetNotes sets the "notes" field.
func (btc *BankTransferCreate) SetNotes(s string) *BankTransferCreate {
	btc.mutation.SetNotes(s)
	return btc
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (btc *BankTransferCreate) SetNillableNotes(s *string) *BankTransferCreate {
	if s != nil {
		btc.SetNotes(*s)
	}
	return btc
}

// SetCreatedAt sets the "created_at" field.
func (btc *BankTransferCreate) SetCreatedAt(t time.Time) *BankTransferCreate {
	btc.mutation.SetCreatedAt(t)
	return btc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (btc *BankTransferCreate) SetNillableCreatedAt(t *time.Time) *BankTransferCreate {
	if t != nil {
		btc.SetCreatedAt(*t)
	}
	return btc
}

// SetUpdatedAt sets the "updated_at" field.
func (btc *BankTransferCreate) SetUpdatedAt(t time.Time) *BankTransferCreate {
	btc.mutation.SetUpdatedAt(t)
	return btc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (btc *BankTransferCreate) SetNillableUpdatedAt(t *time.Time) *BankTransferCreate {
	if t != nil {
		btc.SetUpdatedAt(*t)
	}
	return btc
}

// SetID sets the "id" field.
func (btc *BankTransferCreate) SetID(u uuid.UUID) *BankTransferCreate {
	btc.mutation.SetID(u)
	return btc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (btc *BankTransferCreate) SetNillableID(u *uuid.UUID) *BankTransferCreate {
	if u != nil {
		btc.SetID(*u)
	}
	return btc
}

// SetFromBank sets the "from_bank" edge to the Bank entity.
func (btc *BankTransferCreate) SetFromBank(b *Bank) *BankTransferCreate {
	return btc.SetFromBankID(b.ID)
}

// SetToBank sets the "to_bank" edge to the Bank entity.
func (btc *BankTransferCreate) SetToBank(b *Bank) *BankTransferCreate {
	return btc.SetToBankID(b.ID)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (btc *BankTransferCreate) AddTransactionIDs(ids ...uuid.UUID) *BankTransferCreate {
	btc.mutation.AddTransactionIDs(ids...)
	return btc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (btc *BankTransferCreate) AddTransactions(t ...*Transaction) *BankTransferCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return btc.AddTransactionIDs(ids...)
}

// Mutation returns the BankTransferMutation object of the builder.
func (btc *BankTransferCreate) Mutation() *BankTransferMutation {
	return btc.mutation
}

// Save creates the Bank_Transfer in the database.
func (btc *BankTransferCreate) Save(ctx context.Context) (*Bank_Transfer, error) {
	btc.defaults()
	return withHooks(ctx, btc.sqlSave, btc.mutation, btc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BankTransferCreate) SaveX(ctx context.Context) *Bank_Transfer {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btc *BankTransferCreate) Exec(ctx context.Context) error {
	_, err := btc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btc *BankTransferCreate) ExecX(ctx context.Context) {
	if err := btc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (btc *BankTransferCreate) defaults() {
	if _, ok := btc.mutation.CreatedAt(); !ok {
		v := bank_transfer.DefaultCreatedAt()
		btc.mutation.SetCreatedAt(v)
	}
	if _, ok := btc.mutation.UpdatedAt(); !ok {
		v := bank_transfer.DefaultUpdatedAt()
		btc.mutation.SetUpdatedAt(v)
	}
	if _, ok := btc.mutation.ID(); !ok {
		v := bank_transfer.DefaultID()
		btc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btc *BankTransferCreate) check() error {
	if _, ok := btc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Bank_Transfer.amount"`)}
	}
	if v, ok := btc.mutation.Amount(); ok {
		if err := bank_transfer.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Bank_Transfer.amount": %w`, err)}
		}
	}
	if _, ok := btc.mutation.FromBankID(); !ok {
		return &ValidationError{Name: "from_bank_id", err: errors.New(`ent: missing required field "Bank_Transfer.from_bank_id"`)}
	}
	if _, ok := btc.mutation.ToBankID(); !ok {
		return &ValidationError{Name: "to_bank_id", err: errors.New(`ent: missing required field "Bank_Transfer.to_bank_id"`)}
	}
	if _, ok := btc.mutation.TransactionDate(); !ok {
		return &ValidationError{Name: "transaction_date", err: errors.New(`ent: missing required field "Bank_Transfer.transaction_date"`)}
	}
	if _, ok := btc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bank_Transfer.created_at"`)}
	}
	if _, ok := btc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bank_Transfer.updated_at"`)}
	}
	if len(btc.mutation.FromBankIDs()) == 0 {
		return &ValidationError{Name: "from_bank", err: errors.New(`ent: missing required edge "Bank_Transfer.from_bank"`)}
	}
	if len(btc.mutation.ToBankIDs()) == 0 {
		return &ValidationError{Name: "to_bank", err: errors.New(`ent: missing required edge "Bank_Transfer.to_bank"`)}
	}
	return nil
}

func (btc *BankTransferCreate) sqlSave(ctx context.Context) (*Bank_Transfer, error) {
	if err := btc.check(); err != nil {
		return nil, err
	}
	_node, _spec := btc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	btc.mutation.id = &_node.ID
	btc.mutation.done = true
	return _node, nil
}

func (btc *BankTransferCreate) createSpec() (*Bank_Transfer, *sqlgraph.CreateSpec) {
	var (
		_node = &Bank_Transfer{config: btc.config}
		_spec = sqlgraph.NewCreateSpec(bank_transfer.Table, sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID))
	)
	if id, ok := btc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := btc.mutation.Amount(); ok {
		_spec.SetField(bank_transfer.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := btc.mutation.TransactionDate(); ok {
		_spec.SetField(bank_transfer.FieldTransactionDate, field.TypeTime, value)
		_node.TransactionDate = value
	}
	if value, ok := btc.mutation.Notes(); ok {
		_spec.SetField(bank_transfer.FieldNotes, field.TypeString, value)
		_node.Notes = value
	}
	if value, ok := btc.mutation.CreatedAt(); ok {
		_spec.SetField(bank_transfer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := btc.mutation.UpdatedAt(); ok {
		_spec.SetField(bank_transfer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := btc.mutation.FromBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bank_transfer.FromBankTable,
			Columns: []string{bank_transfer.FromBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FromBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := btc.mutation.ToBankIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bank_transfer.ToBankTable,
			Columns: []string{bank_transfer.ToBankColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ToBankID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := btc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank_transfer.TransactionsTable,
			Columns: []string{bank_transfer.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BankTransferCreateBulk is the builder for creating many Bank_Transfer entities in bulk.
type BankTransferCreateBulk struct {
	config
	err      error
	builders []*BankTransferCreate
}

// Save creates the Bank_Transfer entities in the database.
func (btcb *BankTransferCreateBulk) Save(ctx context.Context) ([]*Bank_Transfer, error) {
	if btcb.err != nil {
		return nil, btcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(btcb.builders))
	nodes := make([]*Bank_Transfer, len(btcb.builders))
	mutators := make([]Mutator, len(btcb.builders))
	for i := range btcb.builders {
		func(i int, root context.Context) {
			builder := btcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BankTransferMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btcb *BankTransferCreateBulk) SaveX(ctx context.Context) []*Bank_Transfer {
	v, err := btcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btcb *BankTransferCreateBulk) Exec(ctx context.Context) error {
	_, err := btcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btcb *BankTransferCreateBulk) ExecX(ctx context.Context) {
	if err := btcb.Exec(ctx); err != nil {
		panic(err)
	}
}
