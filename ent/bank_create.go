// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"finance/ent/bank"
	"finance/ent/bank_transfer"
	"finance/ent/transaction"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// BankCreate is the builder for creating a Bank entity.
type BankCreate struct {
	config
	mutation *BankMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BankCreate) SetName(s string) *BankCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetAccountNumber sets the "account_number" field.
func (bc *BankCreate) SetAccountNumber(s string) *BankCreate {
	bc.mutation.SetAccountNumber(s)
	return bc
}

// SetNillableAccountNumber sets the "account_number" field if the given value is not nil.
func (bc *BankCreate) SetNillableAccountNumber(s *string) *BankCreate {
	if s != nil {
		bc.SetAccountNumber(*s)
	}
	return bc
}

// SetIfscCode sets the "ifsc_code" field.
func (bc *BankCreate) SetIfscCode(s string) *BankCreate {
	bc.mutation.SetIfscCode(s)
	return bc
}

// SetNillableIfscCode sets the "ifsc_code" field if the given value is not nil.
func (bc *BankCreate) SetNillableIfscCode(s *string) *BankCreate {
	if s != nil {
		bc.SetIfscCode(*s)
	}
	return bc
}

// SetBranchName sets the "branch_name" field.
func (bc *BankCreate) SetBranchName(s string) *BankCreate {
	bc.mutation.SetBranchName(s)
	return bc
}

// SetNillableBranchName sets the "branch_name" field if the given value is not nil.
func (bc *BankCreate) SetNillableBranchName(s *string) *BankCreate {
	if s != nil {
		bc.SetBranchName(*s)
	}
	return bc
}

// SetMetadata sets the "metadata" field.
func (bc *BankCreate) SetMetadata(m map[string]interface{}) *BankCreate {
	bc.mutation.SetMetadata(m)
	return bc
}

// SetCreatedAt sets the "created_at" field.
func (bc *BankCreate) SetCreatedAt(t time.Time) *BankCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BankCreate) SetNillableCreatedAt(t *time.Time) *BankCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BankCreate) SetUpdatedAt(t time.Time) *BankCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BankCreate) SetNillableUpdatedAt(t *time.Time) *BankCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BankCreate) SetID(u uuid.UUID) *BankCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BankCreate) SetNillableID(u *uuid.UUID) *BankCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// AddDebitIDs adds the "debits" edge to the Bank_Transfer entity by IDs.
func (bc *BankCreate) AddDebitIDs(ids ...uuid.UUID) *BankCreate {
	bc.mutation.AddDebitIDs(ids...)
	return bc
}

// AddDebits adds the "debits" edges to the Bank_Transfer entity.
func (bc *BankCreate) AddDebits(b ...*Bank_Transfer) *BankCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddDebitIDs(ids...)
}

// AddCreditIDs adds the "credits" edge to the Bank_Transfer entity by IDs.
func (bc *BankCreate) AddCreditIDs(ids ...uuid.UUID) *BankCreate {
	bc.mutation.AddCreditIDs(ids...)
	return bc
}

// AddCredits adds the "credits" edges to the Bank_Transfer entity.
func (bc *BankCreate) AddCredits(b ...*Bank_Transfer) *BankCreate {
	ids := make([]uuid.UUID, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddCreditIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (bc *BankCreate) AddTransactionIDs(ids ...uuid.UUID) *BankCreate {
	bc.mutation.AddTransactionIDs(ids...)
	return bc
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (bc *BankCreate) AddTransactions(t ...*Transaction) *BankCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTransactionIDs(ids...)
}

// Mutation returns the BankMutation object of the builder.
func (bc *BankCreate) Mutation() *BankMutation {
	return bc.mutation
}

// Save creates the Bank in the database.
func (bc *BankCreate) Save(ctx context.Context) (*Bank, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BankCreate) SaveX(ctx context.Context) *Bank {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BankCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BankCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BankCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bank.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bank.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bank.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BankCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bank.name"`)}
	}
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bank.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bank.updated_at"`)}
	}
	return nil
}

func (bc *BankCreate) sqlSave(ctx context.Context) (*Bank, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BankCreate) createSpec() (*Bank, *sqlgraph.CreateSpec) {
	var (
		_node = &Bank{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bank.Table, sqlgraph.NewFieldSpec(bank.FieldID, field.TypeUUID))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bank.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.AccountNumber(); ok {
		_spec.SetField(bank.FieldAccountNumber, field.TypeString, value)
		_node.AccountNumber = value
	}
	if value, ok := bc.mutation.IfscCode(); ok {
		_spec.SetField(bank.FieldIfscCode, field.TypeString, value)
		_node.IfscCode = value
	}
	if value, ok := bc.mutation.BranchName(); ok {
		_spec.SetField(bank.FieldBranchName, field.TypeString, value)
		_node.BranchName = value
	}
	if value, ok := bc.mutation.Metadata(); ok {
		_spec.SetField(bank.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bank.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bank.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := bc.mutation.DebitsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.DebitsTable,
			Columns: []string{bank.DebitsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.CreditsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.CreditsTable,
			Columns: []string{bank.CreditsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(bank_transfer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bank.TransactionsTable,
			Columns: []string{bank.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BankCreateBulk is the builder for creating many Bank entities in bulk.
type BankCreateBulk struct {
	config
	err      error
	builders []*BankCreate
}

// Save creates the Bank entities in the database.
func (bcb *BankCreateBulk) Save(ctx context.Context) ([]*Bank, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bank, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BankMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BankCreateBulk) SaveX(ctx context.Context) []*Bank {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BankCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BankCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
