// Code generated by ent, DO NOT EDIT.

package bank

import (
	"finance/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldName, v))
}

// AccountNumber applies equality check predicate on the "account_number" field. It's identical to AccountNumberEQ.
func AccountNumber(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldAccountNumber, v))
}

// IfscCode applies equality check predicate on the "ifsc_code" field. It's identical to IfscCodeEQ.
func IfscCode(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldIfscCode, v))
}

// BranchName applies equality check predicate on the "branch_name" field. It's identical to BranchNameEQ.
func BranchName(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldBranchName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldName, v))
}

// AccountNumberEQ applies the EQ predicate on the "account_number" field.
func AccountNumberEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldAccountNumber, v))
}

// AccountNumberNEQ applies the NEQ predicate on the "account_number" field.
func AccountNumberNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldAccountNumber, v))
}

// AccountNumberIn applies the In predicate on the "account_number" field.
func AccountNumberIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldAccountNumber, vs...))
}

// AccountNumberNotIn applies the NotIn predicate on the "account_number" field.
func AccountNumberNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldAccountNumber, vs...))
}

// AccountNumberGT applies the GT predicate on the "account_number" field.
func AccountNumberGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldAccountNumber, v))
}

// AccountNumberGTE applies the GTE predicate on the "account_number" field.
func AccountNumberGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldAccountNumber, v))
}

// AccountNumberLT applies the LT predicate on the "account_number" field.
func AccountNumberLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldAccountNumber, v))
}

// AccountNumberLTE applies the LTE predicate on the "account_number" field.
func AccountNumberLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldAccountNumber, v))
}

// AccountNumberContains applies the Contains predicate on the "account_number" field.
func AccountNumberContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldAccountNumber, v))
}

// AccountNumberHasPrefix applies the HasPrefix predicate on the "account_number" field.
func AccountNumberHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldAccountNumber, v))
}

// AccountNumberHasSuffix applies the HasSuffix predicate on the "account_number" field.
func AccountNumberHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldAccountNumber, v))
}

// AccountNumberIsNil applies the IsNil predicate on the "account_number" field.
func AccountNumberIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldAccountNumber))
}

// AccountNumberNotNil applies the NotNil predicate on the "account_number" field.
func AccountNumberNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldAccountNumber))
}

// AccountNumberEqualFold applies the EqualFold predicate on the "account_number" field.
func AccountNumberEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldAccountNumber, v))
}

// AccountNumberContainsFold applies the ContainsFold predicate on the "account_number" field.
func AccountNumberContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldAccountNumber, v))
}

// IfscCodeEQ applies the EQ predicate on the "ifsc_code" field.
func IfscCodeEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldIfscCode, v))
}

// IfscCodeNEQ applies the NEQ predicate on the "ifsc_code" field.
func IfscCodeNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldIfscCode, v))
}

// IfscCodeIn applies the In predicate on the "ifsc_code" field.
func IfscCodeIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldIfscCode, vs...))
}

// IfscCodeNotIn applies the NotIn predicate on the "ifsc_code" field.
func IfscCodeNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldIfscCode, vs...))
}

// IfscCodeGT applies the GT predicate on the "ifsc_code" field.
func IfscCodeGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldIfscCode, v))
}

// IfscCodeGTE applies the GTE predicate on the "ifsc_code" field.
func IfscCodeGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldIfscCode, v))
}

// IfscCodeLT applies the LT predicate on the "ifsc_code" field.
func IfscCodeLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldIfscCode, v))
}

// IfscCodeLTE applies the LTE predicate on the "ifsc_code" field.
func IfscCodeLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldIfscCode, v))
}

// IfscCodeContains applies the Contains predicate on the "ifsc_code" field.
func IfscCodeContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldIfscCode, v))
}

// IfscCodeHasPrefix applies the HasPrefix predicate on the "ifsc_code" field.
func IfscCodeHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldIfscCode, v))
}

// IfscCodeHasSuffix applies the HasSuffix predicate on the "ifsc_code" field.
func IfscCodeHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldIfscCode, v))
}

// IfscCodeIsNil applies the IsNil predicate on the "ifsc_code" field.
func IfscCodeIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldIfscCode))
}

// IfscCodeNotNil applies the NotNil predicate on the "ifsc_code" field.
func IfscCodeNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldIfscCode))
}

// IfscCodeEqualFold applies the EqualFold predicate on the "ifsc_code" field.
func IfscCodeEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldIfscCode, v))
}

// IfscCodeContainsFold applies the ContainsFold predicate on the "ifsc_code" field.
func IfscCodeContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldIfscCode, v))
}

// BranchNameEQ applies the EQ predicate on the "branch_name" field.
func BranchNameEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldBranchName, v))
}

// BranchNameNEQ applies the NEQ predicate on the "branch_name" field.
func BranchNameNEQ(v string) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldBranchName, v))
}

// BranchNameIn applies the In predicate on the "branch_name" field.
func BranchNameIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldBranchName, vs...))
}

// BranchNameNotIn applies the NotIn predicate on the "branch_name" field.
func BranchNameNotIn(vs ...string) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldBranchName, vs...))
}

// BranchNameGT applies the GT predicate on the "branch_name" field.
func BranchNameGT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldBranchName, v))
}

// BranchNameGTE applies the GTE predicate on the "branch_name" field.
func BranchNameGTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldBranchName, v))
}

// BranchNameLT applies the LT predicate on the "branch_name" field.
func BranchNameLT(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldBranchName, v))
}

// BranchNameLTE applies the LTE predicate on the "branch_name" field.
func BranchNameLTE(v string) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldBranchName, v))
}

// BranchNameContains applies the Contains predicate on the "branch_name" field.
func BranchNameContains(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContains(FieldBranchName, v))
}

// BranchNameHasPrefix applies the HasPrefix predicate on the "branch_name" field.
func BranchNameHasPrefix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasPrefix(FieldBranchName, v))
}

// BranchNameHasSuffix applies the HasSuffix predicate on the "branch_name" field.
func BranchNameHasSuffix(v string) predicate.Bank {
	return predicate.Bank(sql.FieldHasSuffix(FieldBranchName, v))
}

// BranchNameIsNil applies the IsNil predicate on the "branch_name" field.
func BranchNameIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldBranchName))
}

// BranchNameNotNil applies the NotNil predicate on the "branch_name" field.
func BranchNameNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldBranchName))
}

// BranchNameEqualFold applies the EqualFold predicate on the "branch_name" field.
func BranchNameEqualFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldEqualFold(FieldBranchName, v))
}

// BranchNameContainsFold applies the ContainsFold predicate on the "branch_name" field.
func BranchNameContainsFold(v string) predicate.Bank {
	return predicate.Bank(sql.FieldContainsFold(FieldBranchName, v))
}

// MetadataIsNil applies the IsNil predicate on the "metadata" field.
func MetadataIsNil() predicate.Bank {
	return predicate.Bank(sql.FieldIsNull(FieldMetadata))
}

// MetadataNotNil applies the NotNil predicate on the "metadata" field.
func MetadataNotNil() predicate.Bank {
	return predicate.Bank(sql.FieldNotNull(FieldMetadata))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Bank {
	return predicate.Bank(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDebits applies the HasEdge predicate on the "debits" edge.
func HasDebits() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DebitsTable, DebitsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDebitsWith applies the HasEdge predicate on the "debits" edge with a given conditions (other predicates).
func HasDebitsWith(preds ...predicate.Bank_Transfer) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := newDebitsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCredits applies the HasEdge predicate on the "credits" edge.
func HasCredits() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CreditsTable, CreditsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCreditsWith applies the HasEdge predicate on the "credits" edge with a given conditions (other predicates).
func HasCreditsWith(preds ...predicate.Bank_Transfer) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := newCreditsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTransactions applies the HasEdge predicate on the "transactions" edge.
func HasTransactions() predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTransactionsWith applies the HasEdge predicate on the "transactions" edge with a given conditions (other predicates).
func HasTransactionsWith(preds ...predicate.Transaction) predicate.Bank {
	return predicate.Bank(func(s *sql.Selector) {
		step := newTransactionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Bank) predicate.Bank {
	return predicate.Bank(sql.NotPredicates(p))
}
