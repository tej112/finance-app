// Code generated by ent, DO NOT EDIT.

package bank

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the bank type in the database.
	Label = "bank"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldIfscCode holds the string denoting the ifsc_code field in the database.
	FieldIfscCode = "ifsc_code"
	// FieldBranchName holds the string denoting the branch_name field in the database.
	FieldBranchName = "branch_name"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDebits holds the string denoting the debits edge name in mutations.
	EdgeDebits = "debits"
	// EdgeCredits holds the string denoting the credits edge name in mutations.
	EdgeCredits = "credits"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// Table holds the table name of the bank in the database.
	Table = "banks"
	// DebitsTable is the table that holds the debits relation/edge.
	DebitsTable = "bank_transfers"
	// DebitsInverseTable is the table name for the Bank_Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "bank_transfer" package.
	DebitsInverseTable = "bank_transfers"
	// DebitsColumn is the table column denoting the debits relation/edge.
	DebitsColumn = "from_bank_id"
	// CreditsTable is the table that holds the credits relation/edge.
	CreditsTable = "bank_transfers"
	// CreditsInverseTable is the table name for the Bank_Transfer entity.
	// It exists in this package in order to avoid circular dependency with the "bank_transfer" package.
	CreditsInverseTable = "bank_transfers"
	// CreditsColumn is the table column denoting the credits relation/edge.
	CreditsColumn = "to_bank_id"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "bank_id"
)

// Columns holds all SQL columns for bank fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAccountNumber,
	FieldIfscCode,
	FieldBranchName,
	FieldMetadata,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Bank queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByIfscCode orders the results by the ifsc_code field.
func ByIfscCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIfscCode, opts...).ToFunc()
}

// ByBranchName orders the results by the branch_name field.
func ByBranchName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBranchName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDebitsCount orders the results by debits count.
func ByDebitsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDebitsStep(), opts...)
	}
}

// ByDebits orders the results by debits terms.
func ByDebits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDebitsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCreditsCount orders the results by credits count.
func ByCreditsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCreditsStep(), opts...)
	}
}

// ByCredits orders the results by credits terms.
func ByCredits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreditsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTransactionsCount orders the results by transactions count.
func ByTransactionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTransactionsStep(), opts...)
	}
}

// ByTransactions orders the results by transactions terms.
func ByTransactions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTransactionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDebitsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DebitsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DebitsTable, DebitsColumn),
	)
}
func newCreditsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreditsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CreditsTable, CreditsColumn),
	)
}
func newTransactionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TransactionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TransactionsTable, TransactionsColumn),
	)
}
